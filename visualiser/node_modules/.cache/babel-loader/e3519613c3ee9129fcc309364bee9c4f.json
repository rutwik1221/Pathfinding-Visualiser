{"ast":null,"code":"var _jsxFileName = \"D:\\\\rutwik\\\\Documents\\\\New folder\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component } from 'react';\nimport Node from \"./Node/Node\";\nimport \"./pfv.css\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\nexport default class PFV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this); //this.toggler=this.toggler.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\n    const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\n    const visitedOrder = dijkstra(grid, startNode, endNode);\n    const path = shortestPath(endNode);\n    animateVisitOrder(visitedOrder, path);\n  }\n\n  toggler(node) {\n    const newgrid = this.state.grid;\n    const newnode = { ...node,\n      isWall: !node.isWall\n    };\n    console.log(node, newnode);\n    newgrid[node.row][node.col] = newnode;\n    this.setState({\n      grid: newgrid\n    });\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.visualizeDijkstra,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Visualize\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 29\n        }\n      }, row.map((node, nodeIdx) => {\n        return /*#__PURE__*/React.createElement(Node, Object.assign({\n          key: `${rowIdx}-${nodeIdx}`\n        }, node, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 41\n          }\n        }));\n      }));\n    })));\n  }\n\n} //onClick ={() =>{console.log(`Hi from ${rowIdx}`);}}\n\nPFV.defaultProps = {\n  START_NODE_ROW: START_NODE_ROW,\n  START_NODE_COL: START_NODE_COL,\n  END_NODE_ROW: END_NODE_ROW,\n  END_NODE_COL: END_NODE_COL\n};\n\nfunction getGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n}\n\nfunction animateVisitOrder(visitedOrder, path) {\n  for (let i = 0; i <= visitedOrder.length; i++) {\n    if (i === visitedOrder.length) {\n      setTimeout(() => {\n        animatePath(path);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedOrder[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animatePath(path) {\n  for (let i = 0; i < path.length; i++) {\n    setTimeout(() => {\n      const node = path[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","Node","dijkstra","shortestPath","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","PFV","constructor","props","state","grid","visualizeDijkstra","bind","componentDidMount","getGrid","setState","startNode","endNode","visitedOrder","path","animateVisitOrder","toggler","node","newgrid","newnode","isWall","console","log","row","col","render","map","rowIdx","nodeIdx","defaultProps","currentRow","push","createNode","isStart","isEnd","distance","Infinity","isVisited","previousNode","i","length","setTimeout","animatePath","document","getElementById","className"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport \"./pfv.css\";\r\nimport {dijkstra,shortestPath} from\"../algorithms/dijkstra.js\"\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst END_NODE_ROW = 10;\r\nconst END_NODE_COL = 35;\r\n\r\nexport default class PFV extends Component{\r\n    static defaultProps = {\r\n        START_NODE_ROW : START_NODE_ROW,\r\n        START_NODE_COL : START_NODE_COL,\r\n        END_NODE_ROW : END_NODE_ROW,\r\n        END_NODE_COL : END_NODE_COL,\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n        };\r\n        this.visualizeDijkstra=this.visualizeDijkstra.bind(this);\r\n        //this.toggler=this.toggler.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\r\n        const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\r\n        const visitedOrder = dijkstra(grid, startNode, endNode);\r\n        const path = shortestPath(endNode);\r\n        animateVisitOrder(visitedOrder,path);\r\n    }\r\n\r\n    toggler(node){\r\n        const newgrid = this.state.grid;\r\n        const newnode = {\r\n            ...node,\r\n            isWall:!node.isWall,\r\n        }\r\n        console.log(node,newnode);\r\n        newgrid[node.row][node.col]=newnode;\r\n        this.setState({grid:newgrid});\r\n    }\r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <>\r\n                <button onClick={this.visualizeDijkstra}>\r\n                    Visualize\r\n                </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <div key ={rowIdx} >\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    return (\r\n                                        <Node\r\n                                            key = {`${rowIdx}-${nodeIdx}`}\r\n                                            {...node}\r\n                                            \r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ); \r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n//onClick ={() =>{console.log(`Hi from ${rowIdx}`);}}\r\nfunction getGrid() {\r\n    const grid = [];\r\n    for(let row=0;row<20;row++){\r\n        const currentRow = [];\r\n        for(let col=0;col<50;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\nfunction createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}\r\n\r\nfunction animateVisitOrder(visitedOrder, path) {\r\n    for (let i = 0; i <= visitedOrder.length; i++) {\r\n      if (i === visitedOrder.length) {\r\n        setTimeout(() => {\r\n          animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedOrder[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n}\r\n\r\nfunction animatePath(path) {\r\n    for (let i = 0; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}