{"ast":null,"code":"var _jsxFileName = \"D:\\\\rutwik\\\\Documents\\\\New folder\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component } from 'react';\nimport Node from \"./Node/Node\";\nimport Navbar from \"./Navbar\";\nimport \"./pfv.css\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\nexport default class PFV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      isMouseDown: false,\n      algo: \"dijkstra\"\n    };\n    this.visualize = this.visualize.bind(this);\n    this.clearVisited = this.clearVisited.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  clearVisited() {\n    const {\n      grid\n    } = this.state;\n\n    for (let row = 0; row < 20; row++) {\n      for (let col = 0; col < 50; col++) {\n        if (grid[row][col].isVisited) {\n          grid[row][col].isVisited = false;\n          document.getElementById(`${row}-${col}`).className = 'node';\n        }\n      }\n    }\n\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualize() {\n    this.clearVisited();\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\n    const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\n    let visitedOrder;\n\n    if (this.state.algo === \"dijkstra\") {\n      visitedOrder = dijkstra(grid, startNode, endNode);\n    }\n\n    const path = shortestPath(endNode);\n    animateVisitOrder(visitedOrder, path);\n  }\n\n  toggleWall(row, col) {\n    const newgrid = this.state.grid;\n    const node = newgrid[row][col];\n    const newnode = { ...node,\n      isWall: !node.isWall\n    };\n    newgrid[node.row][node.col] = newnode;\n    this.setState({\n      grid: newgrid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (!this.state.isMouseDown) this.setState({\n      isMouseDown: true\n    });\n    this.toggleWall(row, col);\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.isMouseDown) this.toggleWall(row, col);\n  }\n\n  handleMouseUp() {\n    this.setState({\n      isMouseDown: false\n    });\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Navbar, {\n      className: \"navbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, \"Pathfinding Visualizer\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.visualize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }\n    }, \"Visualize\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.clearVisited,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }\n    }, \"Refresh\")), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"row\",\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }\n      }, row.map((node, nodeIdx) => {\n        return /*#__PURE__*/React.createElement(Node, Object.assign({\n          key: `${rowIdx}-${nodeIdx}`\n        }, node, {\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 41\n          }\n        }));\n      }));\n    }))));\n  }\n\n}\nPFV.defaultProps = {\n  START_NODE_ROW: START_NODE_ROW,\n  START_NODE_COL: START_NODE_COL,\n  END_NODE_ROW: END_NODE_ROW,\n  END_NODE_COL: END_NODE_COL,\n  nrows: 50,\n  ncols: 20\n};\n\nfunction getGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n}\n\nfunction animateVisitOrder(visitedOrder, path) {\n  for (let i = 0; i <= visitedOrder.length; i++) {\n    if (i === visitedOrder.length) {\n      setTimeout(() => {\n        animatePath(path);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedOrder[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animatePath(path) {\n  for (let i = 0; i < path.length; i++) {\n    setTimeout(() => {\n      const node = path[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","Node","Navbar","dijkstra","shortestPath","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","PFV","constructor","props","state","grid","isMouseDown","algo","visualize","bind","clearVisited","componentDidMount","getGrid","setState","row","col","isVisited","document","getElementById","className","startNode","endNode","visitedOrder","path","animateVisitOrder","toggleWall","newgrid","node","newnode","isWall","handleMouseDown","handleMouseEnter","handleMouseUp","render","map","rowIdx","nodeIdx","defaultProps","nrows","ncols","currentRow","push","createNode","isStart","isEnd","distance","Infinity","previousNode","i","length","setTimeout","animatePath"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport Navbar from \"./Navbar\" \r\nimport \"./pfv.css\";\r\nimport {dijkstra,shortestPath} from\"../algorithms/dijkstra.js\"\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst END_NODE_ROW = 10;\r\nconst END_NODE_COL = 35;\r\n\r\nexport default class PFV extends Component{\r\n    static defaultProps = {\r\n        START_NODE_ROW : START_NODE_ROW,\r\n        START_NODE_COL : START_NODE_COL,\r\n        END_NODE_ROW : END_NODE_ROW,\r\n        END_NODE_COL : END_NODE_COL,\r\n        nrows:50,\r\n        ncols:20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n            isMouseDown : false,\r\n            algo:\"dijkstra\"\r\n        };\r\n        this.visualize=this.visualize.bind(this);\r\n        this.clearVisited=this.clearVisited.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n    clearVisited(){\r\n        const {grid}=this.state;\r\n        for(let row=0;row<20;row++){\r\n            for(let col=0;col<50;col++){\r\n                if(grid[row][col].isVisited){\r\n                    grid[row][col].isVisited=false;\r\n                    document.getElementById(`${row}-${col}`).className ='node';\r\n                }\r\n            }\r\n        }\r\n        this.setState({grid:grid});\r\n    }\r\n    visualize(){\r\n        this.clearVisited();\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\r\n        const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\r\n        let visitedOrder;\r\n        if(this.state.algo === \"dijkstra\"){\r\n            visitedOrder = dijkstra(grid, startNode, endNode);\r\n        }\r\n        const path = shortestPath(endNode);\r\n        animateVisitOrder(visitedOrder,path);\r\n    }\r\n    toggleWall(row, col){\r\n        const newgrid = this.state.grid;\r\n        const node = newgrid[row][col];\r\n        const newnode = {\r\n            ...node,\r\n            isWall:!node.isWall,\r\n        }\r\n        newgrid[node.row][node.col]=newnode;\r\n        this.setState({grid:newgrid});\r\n    }\r\n    handleMouseDown(row, col) {\r\n        if(!this.state.isMouseDown)\r\n            this.setState({isMouseDown:true});\r\n        this.toggleWall(row, col);\r\n    }\r\n    handleMouseEnter(row, col) {\r\n        if(this.state.isMouseDown)\r\n            this.toggleWall(row, col);\r\n    }\r\n    handleMouseUp(){\r\n        this.setState({isMouseDown:false});\r\n    }     \r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <>\r\n                <Navbar className='navbar'>\r\n                    <span>Pathfinding Visualizer</span>\r\n                    <button onClick={this.visualize}>\r\n                        Visualize\r\n                    </button>\r\n                    <button onClick={this.clearVisited}>\r\n                        Refresh\r\n                    </button>\r\n                </Navbar>\r\n                \r\n                <table className=\"grid\">\r\n                    <tbody>\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <tr className='row' key ={rowIdx} >\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    return (\r\n                                        <Node\r\n                                            key = {`${rowIdx}-${nodeIdx}`}\r\n                                            {...node}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        ); \r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    }\r\n}\r\nfunction getGrid() {\r\n    const grid = [];\r\n    for(let row=0;row<20;row++){\r\n        const currentRow = [];\r\n        for(let col=0;col<50;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}\r\nfunction animateVisitOrder(visitedOrder, path) {\r\n    for (let i = 0; i <= visitedOrder.length; i++) {\r\n      if (i === visitedOrder.length) {\r\n        setTimeout(() => {\r\n          animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedOrder[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className ='node node-visited';\r\n      }, 10 * i);\r\n    }\r\n}\r\nfunction animatePath(path) {\r\n    for (let i = 0; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}