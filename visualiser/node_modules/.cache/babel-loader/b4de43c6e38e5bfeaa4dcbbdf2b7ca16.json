{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rutwi\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component, useState } from 'react';\nimport Node from \"./Node/Node\";\nimport \"./pfv.css\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\n/*export default class PFV extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <div className=\"grid\">\r\n                {grid.map((row,rowIdx)=>{\r\n                    return (\r\n                        <div key ={rowIdx}>\r\n                            {row.map((node,nodeIdx)=>{\r\n                                const {row, col, isStart,isEnd, isWall} = node;\r\n                                return (\r\n                                    <Node\r\n                                    key = {nodeIdx}\r\n                                    row={row}\r\n                                    col={col}\r\n                                    isStart={isStart}\r\n                                    isEnd={isEnd}\r\n                                    isWall={isWall}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    ); \r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}*/\n\nfunction Pfv() {\n  let grid = [];\n  [grid, setGrid] = useState(0);\n  setGrid(getGrid());\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, grid.map((row, rowIdx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: rowIdx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, row.map((node, nodeIdx) => {\n      const {\n        row,\n        col,\n        isStart,\n        isEnd,\n        isWall\n      } = node;\n      return /*#__PURE__*/React.createElement(Node, {\n        key: nodeIdx,\n        row: row,\n        col: col,\n        isStart: isStart,\n        isEnd: isEnd,\n        isWall: isWall,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 33\n        }\n      });\n    }));\n  }));\n}\n\nexport default pfv;\n\nfunction getGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n}","map":{"version":3,"sources":["C:/Users/rutwi/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","useState","Node","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","Pfv","grid","setGrid","getGrid","map","row","rowIdx","node","nodeIdx","col","isStart","isEnd","isWall","pfv","currentRow","push","createNode","distance","Infinity","isVisited","previousNode"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAO,WAAP;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,YAAY,GAAG,EAArB;AACA,MAAMC,YAAY,GAAG,EAArB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA,SAASC,GAAT,GAAc;AACV,MAAIC,IAAI,GAAG,EAAX;AACA,GAACA,IAAD,EAAQC,OAAR,IAAmBR,QAAQ,CAAC,CAAD,CAA3B;AACAQ,EAAAA,OAAO,CAACC,OAAO,EAAR,CAAP;AACA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKF,IAAI,CAACG,GAAL,CAAS,CAACC,GAAD,EAAKC,MAAL,KAAc;AACpB,wBACI;AAAK,MAAA,GAAG,EAAGA,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,GAAG,CAACD,GAAJ,CAAQ,CAACG,IAAD,EAAMC,OAAN,KAAgB;AACrB,YAAM;AAACH,QAAAA,GAAD;AAAMI,QAAAA,GAAN;AAAWC,QAAAA,OAAX;AAAmBC,QAAAA,KAAnB;AAA0BC,QAAAA;AAA1B,UAAoCL,IAA1C;AACA,0BACI,oBAAC,IAAD;AACA,QAAA,GAAG,EAAIC,OADP;AAEA,QAAA,GAAG,EAAEH,GAFL;AAGA,QAAA,GAAG,EAAEI,GAHL;AAIA,QAAA,OAAO,EAAEC,OAJT;AAKA,QAAA,KAAK,EAAEC,KALP;AAMA,QAAA,MAAM,EAAEC,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUH,KAZA,CADL,CADJ;AAiBH,GAlBA,CADL,CADJ;AAuBH;;AACD,eAAeC,GAAf;;AAEA,SAASV,OAAT,GAAmB;AACf,QAAMF,IAAI,GAAG,EAAb;;AACA,OAAI,IAAII,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,EAAlB,EAAqBA,GAAG,EAAxB,EAA2B;AACvB,UAAMS,UAAU,GAAG,EAAnB;;AACA,SAAI,IAAIL,GAAG,GAAC,CAAZ,EAAcA,GAAG,GAAC,EAAlB,EAAqBA,GAAG,EAAxB,EAA2B;AACvBK,MAAAA,UAAU,CAACC,IAAX,CAAgBC,UAAU,CAACP,GAAD,EAAKJ,GAAL,CAA1B;AACH;;AACDJ,IAAAA,IAAI,CAACc,IAAL,CAAUD,UAAV;AACH;;AACD,SAAOb,IAAP;AACH;;AACD,SAASe,UAAT,CAAoBP,GAApB,EAAwBJ,GAAxB,EAA4B;AACxB,SAAM;AACFI,IAAAA,GADE;AAEFJ,IAAAA,GAFE;AAGFK,IAAAA,OAAO,EAACL,GAAG,KAAKT,cAAR,IAA0Ba,GAAG,KAAGZ,cAHtC;AAIFc,IAAAA,KAAK,EAAEN,GAAG,KAAIP,YAAP,IAAuBW,GAAG,KAAKV,YAJpC;AAKFkB,IAAAA,QAAQ,EAAEC,QALR;AAMFC,IAAAA,SAAS,EAAE,KANT;AAOFP,IAAAA,MAAM,EAAE,KAPN;AAQFQ,IAAAA,YAAY,EAAE;AARZ,GAAN;AAUH","sourcesContent":["import React, {Component,useState} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport \"./pfv.css\";\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst END_NODE_ROW = 10;\r\nconst END_NODE_COL = 35;\r\n\r\n/*export default class PFV extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <div className=\"grid\">\r\n                {grid.map((row,rowIdx)=>{\r\n                    return (\r\n                        <div key ={rowIdx}>\r\n                            {row.map((node,nodeIdx)=>{\r\n                                const {row, col, isStart,isEnd, isWall} = node;\r\n                                return (\r\n                                    <Node\r\n                                    key = {nodeIdx}\r\n                                    row={row}\r\n                                    col={col}\r\n                                    isStart={isStart}\r\n                                    isEnd={isEnd}\r\n                                    isWall={isWall}\r\n                                    />\r\n                                );\r\n                            })}\r\n                        </div>\r\n                    ); \r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}*/\r\nfunction Pfv(){\r\n    let grid = [];\r\n    [grid , setGrid] = useState(0);\r\n    setGrid(getGrid());\r\n    return(\r\n        <div className=\"grid\">\r\n            {grid.map((row,rowIdx)=>{\r\n                return (\r\n                    <div key ={rowIdx}>\r\n                        {row.map((node,nodeIdx)=>{\r\n                            const {row, col, isStart,isEnd, isWall} = node;\r\n                            return (\r\n                                <Node\r\n                                key = {nodeIdx}\r\n                                row={row}\r\n                                col={col}\r\n                                isStart={isStart}\r\n                                isEnd={isEnd}\r\n                                isWall={isWall}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ); \r\n            })}\r\n        </div>\r\n    );\r\n}\r\nexport default pfv;\r\n\r\nfunction getGrid() {\r\n    const grid = [];\r\n    for(let row=0;row<20;row++){\r\n        const currentRow = [];\r\n        for(let col=0;col<50;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\nfunction createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row=== END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}"]},"metadata":{},"sourceType":"module"}