{"ast":null,"code":"var _jsxFileName = \"D:\\\\rutwik\\\\Documents\\\\New folder\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component } from 'react';\nimport Node from \"./Node/Node\";\nimport \"./pfv.css\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\nexport default class PFV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: []\n    };\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n    this.toggler = this.toggler.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\n    const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\n    const visitedOrder = dijkstra(grid, startNode, endNode);\n    const path = shortestPath(endNode);\n    animateVisitOrder(visitedOrder, path);\n  }\n\n  toggler() {\n    console.log(this);\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.visualizeDijkstra,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, \"Visualize\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }, row.map((node, nodeIdx) => {\n        return /*#__PURE__*/React.createElement(Node, Object.assign({}, node, {\n          onClick: this.toggler,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 41\n          }\n        }));\n      }));\n    })));\n  }\n\n}\nPFV.defaultProps = {\n  START_NODE_ROW: 0,\n  START_NODE_COL: 15,\n  END_NODE_ROW: 10,\n  END_NODE_COL: 35\n};\n\nfunction getGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === 10 && col === 15,\n    isEnd: row === 10 && col === 35,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n}\n\nfunction animateVisitOrder(visitedOrder, path) {\n  for (let i = 0; i <= visitedOrder.length; i++) {\n    if (i === visitedOrder.length) {\n      setTimeout(() => {\n        animatePath(path);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedOrder[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animatePath(path) {\n  for (let i = 0; i < path.length; i++) {\n    setTimeout(() => {\n      const node = path[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","Node","dijkstra","shortestPath","PFV","constructor","props","state","grid","visualizeDijkstra","bind","toggler","componentDidMount","getGrid","setState","startNode","START_NODE_ROW","START_NODE_COL","endNode","END_NODE_ROW","END_NODE_COL","visitedOrder","path","animateVisitOrder","console","log","render","map","row","rowIdx","node","nodeIdx","defaultProps","currentRow","col","push","createNode","isStart","isEnd","distance","Infinity","isVisited","isWall","previousNode","i","length","setTimeout","animatePath","document","getElementById","className"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport \"./pfv.css\";\r\nimport {dijkstra,shortestPath} from\"../algorithms/dijkstra.js\"\r\n\r\n\r\nexport default class PFV extends Component{\r\n    static defaultProps = {\r\n        START_NODE_ROW : 0,\r\n        START_NODE_COL : 15,\r\n        END_NODE_ROW : 10,\r\n        END_NODE_COL : 35,\r\n    }\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n        };\r\n        this.visualizeDijkstra=this.visualizeDijkstra.bind(this);\r\n        this.toggler=this.toggler.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n\r\n    visualizeDijkstra(){\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\r\n        const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\r\n        const visitedOrder = dijkstra(grid, startNode, endNode);\r\n        const path = shortestPath(endNode);\r\n        animateVisitOrder(visitedOrder,path);\r\n    }\r\n    toggler(){\r\n        console.log(this);\r\n    }\r\n\r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <>\r\n                <button onClick={this.visualizeDijkstra}>\r\n                    Visualize\r\n                </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <div key ={rowIdx}>\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    return (\r\n                                        <Node\r\n                                            {...node}\r\n                                            onClick = {this.toggler}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ); \r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getGrid() {\r\n    const grid = [];\r\n    for(let row=0;row<20;row++){\r\n        const currentRow = [];\r\n        for(let col=0;col<50;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === 10 && col===15,\r\n        isEnd: row === 10 && col === 35,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}\r\n\r\nfunction animateVisitOrder(visitedOrder, path) {\r\n    for (let i = 0; i <= visitedOrder.length; i++) {\r\n      if (i === visitedOrder.length) {\r\n        setTimeout(() => {\r\n          animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedOrder[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n}\r\n\r\nfunction animatePath(path) {\r\n    for (let i = 0; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}