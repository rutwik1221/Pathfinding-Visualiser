{"ast":null,"code":"export function astar(grid, start, end) {\n  if (start === end) {\n    return false;\n  }\n\n  let visitOrder = [];\n  let openSet = new Set();\n  openSet.add(start);\n  let closedSet = new Set();\n  let gCost = new Map();\n  let hCost = new Map();\n  let fCost = new Map();\n  let prev = new Map();\n  gCost.set(start, setgCost(start, start));\n  hCost.set(start, sethCost(start, end));\n  fCost.set(start, gCost.get(start) + hCost.get(start));\n\n  while (openSet.size > 0) {\n    let current = min(fCost);\n    visitOrder.push(current);\n    openSet.delete(current);\n    closedSet.add(current);\n\n    if (current === end) {\n      return visitOrder;\n    }\n\n    let neighbours = getNeighbours(grid, current);\n\n    for (let node of neighbours) {\n      if (!closedSet.has(node)) {\n        if (!openSet.has(node)) {\n          gCost.set(node, setgCost(node, start));\n          hCost.set(node, sethCost(node, end));\n          fCost.set(node, gCost.get(node) + hCost.get(node));\n          prev.set(node, current);\n\n          if (!openSet.has(node)) {\n            openSet.add(node);\n          }\n        }\n      }\n    }\n  }\n\n  return visitOrder;\n}\n\nfunction setgCost(node, start) {\n  return manhattanDistance(node, start);\n}\n\nfunction sethCost(node, end) {\n  return manhattanDistance(node, end);\n}\n\nfunction min(fscore) {\n  let minKey,\n      minVal = Infinity;\n\n  for (let [key, value] of fscore) {\n    if (value < minVal) {\n      minVal = value;\n      minKey = key;\n    }\n  }\n\n  return minKey;\n}\n\nfunction getNeighbours(grid, current) {\n  let neighbours = [];\n\n  if (current.row === 0) {\n    if (current.col === 0) {\n      neighbours.push(grid[current.row + 1][current.col]);\n      neighbours.push(grid[current.row][current.col + 1]);\n    } else if (current.col === 49) {\n      neighbours.push(grid[current.row + 1][current.col]);\n      neighbours.push(grid[current.row][current.col - 1]);\n    } else {\n      neighbours.push(grid[current.row + 1][current.col]);\n      neighbours.push(grid[current.row][current.col + 1]);\n      neighbours.push(grid[current.row][current.col - 1]);\n    }\n  } else if (current.row === 19) {\n    if (current.col === 0) {\n      neighbours.push(grid[current.row - 1][current.col]);\n      neighbours.push(grid[current.row][current.col + 1]);\n    } else if (current.col === 49) {\n      neighbours.push(grid[current.row - 1][current.col]);\n      neighbours.push(grid[current.row][current.col - 1]);\n    } else {\n      neighbours.push(grid[current.row - 1][current.col]);\n      neighbours.push(grid[current.row][current.col + 1]);\n      neighbours.push(grid[current.row][current.col - 1]);\n    }\n  } else if (current.col === 0) {\n    neighbours.push(grid[current.row + 1][current.col]);\n    neighbours.push(grid[current.row - 1][current.col]);\n    neighbours.push(grid[current.row][current.col + 1]);\n  } else if (current.col === 49) {\n    neighbours.push(grid[current.row + 1][current.col]);\n    neighbours.push(grid[current.row - 1][current.col]);\n    neighbours.push(grid[current.row][current.col - 1]);\n  } else {\n    neighbours.push(grid[current.row + 1][current.col]);\n    neighbours.push(grid[current.row - 1][current.col]);\n    neighbours.push(grid[current.row][current.col + 1]);\n    neighbours.push(grid[current.row][current.col - 1]);\n  }\n\n  return neighbours.filter(n => !n.isWall);\n}\n\nfunction manhattanDistance(n1, n2) {\n  let x = Math.abs(n2.row - n1.row);\n  let y = Math.abs(n2.col - n2.col);\n  return x + y;\n}\n\nexport function shortestPath(node) {\n  const path = [];\n\n  while (node !== null) {\n    path.puah(node);\n    node = node.previousNode;\n  }\n\n  return path;\n}\n/*\r\nexport function astar(grid, start, end) {\r\n\tif (!start || !end || start === end) {\r\n\t\treturn false;\r\n\t}\r\n\tlet visitedNodesInOrder = [];\r\n\tstart.distance = 0;\r\n\tstart.totalDistance = 0;\r\n\tstart.direction = \"up\";\r\n\tlet unvisitedNodes=getNodes(grid);\r\n\twhile (unvisitedNodes.length) {\r\n\t\tconsole.log(unvisitedNodes)\r\n\t\tlet currentNode = closestNode(unvisitedNodes)\r\n\t\tconsole.log(currentNode)\r\n\t\tif (currentNode.distance === Infinity) \r\n\t\t  \treturn false;\r\n\t\tvisitedNodesInOrder.push(currentNode);\r\n\t  \tcurrentNode.isVisited=true;;\r\n\t  \tif (currentNode === end) {\r\n\t\t\treturn visitedNodesInOrder;\r\n\t  \t}\r\n\t  \tupdateNeighbors(grid, currentNode, end, start);\r\n\t}\r\n}\r\nfunction getNodes(grid){\r\n\tlet nodes = [];\r\n\t\tfor(const row of grid){\r\n\t\t\tfor(const node of row){\r\n\t\t\t\tif(!node.isWall){\r\n\t\t\t\t\tnodes.push(node);\r\n\t\t\t\t}\r\n\t\t \t}\r\n\t \t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction closestNode(unvisitedNodes) {\r\n\tlet currentClosest, index;\r\n\tfor (let i = 0; i < unvisitedNodes.length; i++) {\r\n\t\tif (!currentClosest || currentClosest.totalDistance > unvisitedNodes[i].totalDistance) {\r\n\t\t\tcurrentClosest = unvisitedNodes[i];\r\n\t\t\tindex = i;\r\n\t\t} \r\n\t  \telse if (currentClosest.totalDistance === unvisitedNodes[i].totalDistance) {\r\n\t\t  \tif (currentClosest.heuristicDistance > unvisitedNodes[i].heuristicDistance) {\r\n\t\t  \t\tcurrentClosest = unvisitedNodes[i];\r\n\t\t  \t\tindex = i;\r\n\t\t\t}\r\n\t  \t}\r\n\t}\r\n\tunvisitedNodes.splice(index, 1);\r\n\treturn currentClosest;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n    const neighbours = [];\r\n    const {col, row} = node;\r\n    if (row > 0){\r\n        neighbours.push(grid[row - 1][col]);\r\n    } \r\n    if (row < grid.length - 1){\r\n        neighbours.push(grid[row + 1][col]);\r\n    }\r\n    if (col > 0){\r\n        neighbours.push(grid[row][col - 1]);\r\n    }\r\n    if (col < grid[0].length - 1){\r\n        neighbours.push(grid[row][col + 1]);\r\n\t}\r\n    return neighbours.filter(neighbour => !neighbour.isWall);\r\n}\r\n\r\nfunction updateNeighbors(grid, currentNode, start, end) {\r\n\tlet neighbours = getNeighbours(currentNode,grid);\r\n\tfor (let neighbour of neighbours) {\r\n\t\tif (end) {\r\n\t\t\tupdateNode(currentNode, neighbour, end, start );\r\n\t\t}\r\n\t\telse {\r\n\t\t\tupdateNode(currentNode, neighbour);\r\n\t  \t}\r\n\t}\r\n}\r\n\r\n  \r\nfunction updateNode(currentNode, neighbour, end) {\r\n\tlet distance = getDistance(currentNode, neighbour);\r\n\tif (!neighbour.heuristicDistance) \r\n\t\tneighbour.heuristicDistance = manhattanDistance(neighbour, end);\r\n\tlet distanceToCompare = currentNode.distance + distance[0];\r\n\tif (distanceToCompare < neighbour.distance) {\r\n\t\tneighbour.distance = distanceToCompare;\r\n\t\tneighbour.totalDistance = neighbour.distance + neighbour.heuristicDistance;\r\n\t\tneighbour.previousNode = currentNode;\r\n\t\tneighbour.path = distance[1];\r\n\t\tneighbour.direction = distance[2];\r\n\t}\r\n}\r\n\r\n   \r\nfunction getDistance(n1, n2) {\r\n\tlet x1=n1.row;\r\n\tlet x2=n2.row;\r\n\tlet y1=n1.col;\r\n\tlet y2=n2.col;\r\n\tif (x2 < x1 && y1 === y2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [1, [\"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [1.5, null, \"up\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [2.5, null, \"up\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [1.5, null, \"up\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [2.5, null, \"up\"];\r\n\t  }\r\n\t} else if (x2 > x1 && y1 === y2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [1, [\"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [2.5, null, \"down\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [1.5, null, \"down\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [2.5, null, \"down\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [1.5, null, \"down\"];\r\n\t  }\r\n\t}\r\n\tif (y2 < y1 && x1 === x2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [1, [\"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [2.5, null, \"left\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [2.5, null, \"left\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [1.5, null, \"left\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [1.5, null, \"left\"];\r\n\t  }\r\n\t} else if (y2 > y1 && x1 === x2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [1, [\"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [1.5, null, \"right\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [1.5, null, \"right\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [2.5, null, \"right\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [2.5, null, \"right\"];\r\n\t  }\r\n\t}\r\n  }\r\n\r\nfunction manhattanDistance(n1, n2) {\r\n\tlet x=Math.abs(n2.row-n1.row);\r\n\tlet y=Math.abs(n2.col-n2.col);\r\n\treturn (x+y);\r\n}*/","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/algorithms/astar.js"],"names":["astar","grid","start","end","visitOrder","openSet","Set","add","closedSet","gCost","Map","hCost","fCost","prev","set","setgCost","sethCost","get","size","current","min","push","delete","neighbours","getNeighbours","node","has","manhattanDistance","fscore","minKey","minVal","Infinity","key","value","row","col","filter","n","isWall","n1","n2","x","Math","abs","y","shortestPath","path","puah","previousNode"],"mappings":"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","sourcesContent":["export function astar(grid, start, end) {\r\n    if (start === end) {\r\n    \treturn false;\r\n\t}\r\n\tlet visitOrder=[];\r\n\tlet openSet= new Set();\r\n\t\topenSet.add(start);\r\n\tlet closedSet = new Set();\r\n\tlet gCost = new Map();\r\n\tlet hCost = new Map();\r\n\tlet fCost = new Map();\r\n\tlet prev = new Map();\r\n\tgCost.set(start,setgCost(start,start));\r\n\thCost.set(start,sethCost(start,end));\r\n\tfCost.set(start,gCost.get(start) + hCost.get(start));\r\n\r\n\twhile(openSet.size>0){\r\n\t\tlet current = min(fCost);\r\n\t\tvisitOrder.push(current);\r\n\t\topenSet.delete(current);\r\n\t\tclosedSet.add(current);\r\n    \tif(current===end){\r\n        \treturn visitOrder\r\n    \t}\r\n\t\tlet neighbours = getNeighbours(grid,current);\r\n\t\tfor(let node of neighbours){\r\n\t\t\tif(!closedSet.has(node)){\r\n\t\t\t\tif(!openSet.has(node)){\r\n\t\t\t\t\tgCost.set(node,setgCost(node,start));\r\n\t\t\t\t\thCost.set(node,sethCost(node,end));\r\n\t\t\t\t\tfCost.set(node, gCost.get(node) + hCost.get(node) );\r\n\t\t\t\t\tprev.set(node,current);\r\n\t\t\t\t\tif(!openSet.has(node)){\r\n\t\t\t\t\t\topenSet.add(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\treturn visitOrder\r\n}\r\nfunction setgCost(node,start){\r\n\treturn manhattanDistance(node,start)\r\n}\r\nfunction sethCost(node,end){\r\n\treturn manhattanDistance(node,end)\r\n}\r\nfunction min(fscore){\r\n\tlet minKey, minVal=Infinity;\r\n\tfor(let [key,value] of fscore){\r\n    \tif(value<minVal){\r\n        \tminVal=value;\r\n        \tminKey=key\r\n    \t}\r\n\t}\r\n    return minKey;\r\n}\r\n\r\nfunction getNeighbours(grid,current){\r\n\tlet neighbours=[];  \r\n\tif(current.row===0){\r\n\t\tif(current.col===0){\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t}\r\n\t\telse if(current.col===49){\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t}\r\n\telse if(current.row===19){\r\n\t\tif(current.col===0){\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t}\r\n\t\telse if(current.col===49){\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t}\r\n\telse if(current.col===0){\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t}\r\n\telse if(current.col===49){\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t}\r\n\telse{\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t}\r\n\treturn neighbours.filter(n => !n.isWall);\r\n} \r\n\r\nfunction manhattanDistance(n1, n2) {\r\n\tlet x=Math.abs(n2.row-n1.row);\r\n\tlet y=Math.abs(n2.col-n2.col);\r\n\treturn (x+y);\r\n}\r\n\r\nexport function shortestPath(node){\r\n    const path = [];\r\n    while(node!==null){\r\n        path.puah(node);\r\n        node = node.previousNode;\r\n    }\r\n    return path;\r\n}\r\n/*\r\nexport function astar(grid, start, end) {\r\n\tif (!start || !end || start === end) {\r\n\t\treturn false;\r\n\t}\r\n\tlet visitedNodesInOrder = [];\r\n\tstart.distance = 0;\r\n\tstart.totalDistance = 0;\r\n\tstart.direction = \"up\";\r\n\tlet unvisitedNodes=getNodes(grid);\r\n\twhile (unvisitedNodes.length) {\r\n\t\tconsole.log(unvisitedNodes)\r\n\t\tlet currentNode = closestNode(unvisitedNodes)\r\n\t\tconsole.log(currentNode)\r\n\t\tif (currentNode.distance === Infinity) \r\n\t\t  \treturn false;\r\n\t\tvisitedNodesInOrder.push(currentNode);\r\n\t  \tcurrentNode.isVisited=true;;\r\n\t  \tif (currentNode === end) {\r\n\t\t\treturn visitedNodesInOrder;\r\n\t  \t}\r\n\t  \tupdateNeighbors(grid, currentNode, end, start);\r\n\t}\r\n}\r\nfunction getNodes(grid){\r\n\tlet nodes = [];\r\n\t\tfor(const row of grid){\r\n\t\t\tfor(const node of row){\r\n\t\t\t\tif(!node.isWall){\r\n\t\t\t\t\tnodes.push(node);\r\n\t\t\t\t}\r\n\t\t \t}\r\n\t \t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction closestNode(unvisitedNodes) {\r\n\tlet currentClosest, index;\r\n\tfor (let i = 0; i < unvisitedNodes.length; i++) {\r\n\t\tif (!currentClosest || currentClosest.totalDistance > unvisitedNodes[i].totalDistance) {\r\n\t\t\tcurrentClosest = unvisitedNodes[i];\r\n\t\t\tindex = i;\r\n\t\t} \r\n\t  \telse if (currentClosest.totalDistance === unvisitedNodes[i].totalDistance) {\r\n\t\t  \tif (currentClosest.heuristicDistance > unvisitedNodes[i].heuristicDistance) {\r\n\t\t  \t\tcurrentClosest = unvisitedNodes[i];\r\n\t\t  \t\tindex = i;\r\n\t\t\t}\r\n\t  \t}\r\n\t}\r\n\tunvisitedNodes.splice(index, 1);\r\n\treturn currentClosest;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n    const neighbours = [];\r\n    const {col, row} = node;\r\n    if (row > 0){\r\n        neighbours.push(grid[row - 1][col]);\r\n    } \r\n    if (row < grid.length - 1){\r\n        neighbours.push(grid[row + 1][col]);\r\n    }\r\n    if (col > 0){\r\n        neighbours.push(grid[row][col - 1]);\r\n    }\r\n    if (col < grid[0].length - 1){\r\n        neighbours.push(grid[row][col + 1]);\r\n\t}\r\n    return neighbours.filter(neighbour => !neighbour.isWall);\r\n}\r\n\r\nfunction updateNeighbors(grid, currentNode, start, end) {\r\n\tlet neighbours = getNeighbours(currentNode,grid);\r\n\tfor (let neighbour of neighbours) {\r\n\t\tif (end) {\r\n\t\t\tupdateNode(currentNode, neighbour, end, start );\r\n\t\t}\r\n\t\telse {\r\n\t\t\tupdateNode(currentNode, neighbour);\r\n\t  \t}\r\n\t}\r\n}\r\n\r\n  \r\nfunction updateNode(currentNode, neighbour, end) {\r\n\tlet distance = getDistance(currentNode, neighbour);\r\n\tif (!neighbour.heuristicDistance) \r\n\t\tneighbour.heuristicDistance = manhattanDistance(neighbour, end);\r\n\tlet distanceToCompare = currentNode.distance + distance[0];\r\n\tif (distanceToCompare < neighbour.distance) {\r\n\t\tneighbour.distance = distanceToCompare;\r\n\t\tneighbour.totalDistance = neighbour.distance + neighbour.heuristicDistance;\r\n\t\tneighbour.previousNode = currentNode;\r\n\t\tneighbour.path = distance[1];\r\n\t\tneighbour.direction = distance[2];\r\n\t}\r\n}\r\n\r\n   \r\nfunction getDistance(n1, n2) {\r\n\tlet x1=n1.row;\r\n\tlet x2=n2.row;\r\n\tlet y1=n1.col;\r\n\tlet y2=n2.col;\r\n\tif (x2 < x1 && y1 === y2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [1, [\"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [1.5, null, \"up\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [2.5, null, \"up\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [1.5, null, \"up\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [2.5, null, \"up\"];\r\n\t  }\r\n\t} else if (x2 > x1 && y1 === y2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [1, [\"f\"], \"down\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [2.5, null, \"down\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [1.5, null, \"down\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [2.5, null, \"down\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [1.5, null, \"down\"];\r\n\t  }\r\n\t}\r\n\tif (y2 < y1 && x1 === x2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [1, [\"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"left\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [2.5, null, \"left\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [2.5, null, \"left\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [1.5, null, \"left\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [1.5, null, \"left\"];\r\n\t  }\r\n\t} else if (y2 > y1 && x1 === x2) {\r\n\t  if (n1.direction === \"up\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"right\") {\r\n\t\treturn [1, [\"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"left\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"down\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"right\"];\r\n\t  } else if (n1.direction === \"up-right\") {\r\n\t\treturn [1.5, null, \"right\"];\r\n\t  } else if (n1.direction === \"down-right\") {\r\n\t\treturn [1.5, null, \"right\"];\r\n\t  } else if (n1.direction === \"up-left\") {\r\n\t\treturn [2.5, null, \"right\"];\r\n\t  } else if (n1.direction === \"down-left\") {\r\n\t\treturn [2.5, null, \"right\"];\r\n\t  }\r\n\t}\r\n  }\r\n\r\nfunction manhattanDistance(n1, n2) {\r\n\tlet x=Math.abs(n2.row-n1.row);\r\n\tlet y=Math.abs(n2.col-n2.col);\r\n\treturn (x+y);\r\n}*/  "]},"metadata":{},"sourceType":"module"}