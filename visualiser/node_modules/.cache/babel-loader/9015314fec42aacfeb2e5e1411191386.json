{"ast":null,"code":"var _jsxFileName = \"D:\\\\rutwik\\\\Documents\\\\New folder\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component } from 'react';\nimport Node from \"./Node/Node\";\nimport Nav from \"./Navbar\";\nimport \"./pfv.css\";\nimport { dijkstra } from \"../algorithms/dijkstra.js\";\nimport { astar } from \"../algorithms/astar.js\";\nimport { BreadthFirstSearch, DepthFirstSearch } from \"../algorithms/BreadthFirstSearch\";\nexport default class PFV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      isMouseDown: false,\n      algo: \"Dijkstra's\",\n      START_NODE_ROW: this.props.nrows / 2,\n      START_NODE_COL: Math.floor(this.props.ncols / 4),\n      END_NODE_ROW: this.props.nrows / 2,\n      END_NODE_COL: Math.floor(3 * this.props.ncols / 4)\n    };\n    this.visualize = this.visualize.bind(this);\n    this.clearVisited = this.clearVisited.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  createNode(col, row) {\n    return {\n      col,\n      row,\n      isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n      isEnd: row === this.state.END_NODE_ROW && col === this.state.END_NODE_COL,\n      distance: Infinity,\n      totalDistance: Infinity,\n      heuristicDistance: null,\n      direction: null,\n      isVisited: false,\n      isWall: false,\n      previousNode: null\n    };\n  }\n\n  getGrid() {\n    const grid = [];\n\n    for (let row = 0; row < this.props.nrows; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < this.props.ncols; col++) {\n        currentRow.push(this.createNode(col, row));\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  clearVisited() {\n    const {\n      grid\n    } = this.state;\n\n    for (let row = 0; row < this.props.nrows; row++) {\n      for (let col = 0; col < this.props.ncols; col++) {\n        if (!grid[row][col].isWall) {\n          if (grid[row][col].isStart) {\n            document.getElementById(`${row}-${col}`).className = 'node-start';\n          } else if (grid[row][col].isEnd) {\n            document.getElementById(`${row}-${col}`).className = 'node-end';\n          } else {\n            document.getElementById(`${row}-${col}`).className = 'node';\n          }\n        }\n\n        grid[row][col].isVisited = false;\n      }\n    }\n\n    this.setState({\n      grid: grid\n    });\n  }\n\n  visualize() {\n    this.clearVisited();\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n    const endNode = grid[this.state.END_NODE_ROW][this.state.END_NODE_COL];\n    let result;\n\n    if (this.state.algo === \"Dijkstra's\") {\n      result = dijkstra(grid, startNode, endNode);\n    } else if (this.state.algo === \"A*\") {\n      result = astar(grid, startNode, endNode);\n    } else if (this.state.algo === \"BreadthFirstSearch\") {\n      result = BreadthFirstSearch(grid, startNode, endNode);\n    } else if (this.state.algo === \"DepthFirstSearch\") {\n      result = DepthFirstSearch(grid, startNode, endNode);\n    }\n\n    animateVisitOrder(result.visitedOrder, result.path);\n  }\n\n  toggleWall(row, col) {\n    const newgrid = this.state.grid;\n    const node = newgrid[row][col];\n    const newnode = { ...node,\n      isWall: !node.isWall\n    };\n    newgrid[node.row][node.col] = newnode;\n    this.setState({\n      grid: newgrid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (!this.state.isMouseDown) this.setState({\n      isMouseDown: true\n    });\n    this.toggleWall(row, col);\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.isMouseDown) this.toggleWall(row, col);\n  }\n\n  handleMouseUp() {\n    this.setState({\n      isMouseDown: false\n    });\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"nav\", {\n      className: \"navbar navbar-expand-lg navbar-light bg-light\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#\",\n      className: \"navbar-brand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, \"Pathfinding Visualiser\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success\",\n      onClick: this.visualize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, \"Visualize \", this.state.algo, \" Algorithm\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-secondary\",\n      onClick: this.clearVisited,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }\n    }, \"Refresh\"), /*#__PURE__*/React.createElement(\"li\", {\n      className: \"nav-item dropdown\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"nav-link dropdown-toggle\",\n      id: \"navbarDropdownMenuLink\",\n      role: \"button\",\n      \"data-toggle\": \"dropdown\",\n      \"aria-haspopup\": \"true\",\n      \"aria-expanded\": \"false\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 25\n      }\n    }, this.state.algo), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"dropdown-menu\",\n      \"aria-labelledby\": \"navbarDropdownMenuLink\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"dropdown-item\",\n      onClick: () => this.setState({\n        algo: \"Dijkstra's\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 29\n      }\n    }, \"Dijkstra's Algorithm\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"dropdown-item\",\n      onClick: () => this.setState({\n        algo: \"A*\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 29\n      }\n    }, \"A* Algorithm\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"dropdown-item\",\n      onClick: () => this.setState({\n        algo: \"BreadthFirstSearch\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 29\n      }\n    }, \"BreadthFirstSearch Algorithm\"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"dropdown-item\",\n      onClick: () => this.setState({\n        algo: \"DepthFirstSearch\"\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 29\n      }\n    }, \"DepthFirstSearch Algorithm\")))), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, grid.map((row, rowIdx) => {\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        className: \"row\",\n        key: rowIdx,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 29\n        }\n      }, row.map((node, nodeIdx) => {\n        return /*#__PURE__*/React.createElement(Node, Object.assign({\n          key: `${rowIdx}-${nodeIdx}`\n        }, node, {\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 41\n          }\n        }));\n      }));\n    }))));\n  }\n\n}\n/*function createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        totalDistance:Infinity,\r\n        heuristicDistance:null,\r\n        direction:null,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}*/\n\nPFV.defaultProps = {\n  nrows: 20,\n  ncols: 50\n};\n\nfunction animateVisitOrder(visitedOrder, path) {\n  for (let i = 0; i <= visitedOrder.length; i++) {\n    if (i === visitedOrder.length) {\n      setTimeout(() => {\n        animatePath(path);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedOrder[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animatePath(path) {\n  for (let i = 0; i < path.length; i++) {\n    setTimeout(() => {\n      const node = path[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","Node","Nav","dijkstra","astar","BreadthFirstSearch","DepthFirstSearch","PFV","constructor","props","state","grid","isMouseDown","algo","START_NODE_ROW","nrows","START_NODE_COL","Math","floor","ncols","END_NODE_ROW","END_NODE_COL","visualize","bind","clearVisited","componentDidMount","getGrid","setState","createNode","col","row","isStart","isEnd","distance","Infinity","totalDistance","heuristicDistance","direction","isVisited","isWall","previousNode","currentRow","push","document","getElementById","className","startNode","endNode","result","animateVisitOrder","visitedOrder","path","toggleWall","newgrid","node","newnode","handleMouseDown","handleMouseEnter","handleMouseUp","render","map","rowIdx","nodeIdx","defaultProps","i","length","setTimeout","animatePath"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport Nav from \"./Navbar\" \r\nimport \"./pfv.css\";\r\nimport {dijkstra} from\"../algorithms/dijkstra.js\"\r\nimport {astar} from\"../algorithms/astar.js\"\r\nimport {BreadthFirstSearch,DepthFirstSearch} from \"../algorithms/BreadthFirstSearch\"\r\n\r\nexport default class PFV extends Component{\r\n    static defaultProps = {\r\n        nrows:20,\r\n        ncols:50,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n            isMouseDown : false,\r\n            algo:\"Dijkstra's\",\r\n            START_NODE_ROW : this.props.nrows/2,\r\n            START_NODE_COL : Math.floor(this.props.ncols/4),\r\n            END_NODE_ROW : this.props.nrows/2,\r\n            END_NODE_COL : Math.floor(3*this.props.ncols/4),\r\n        };\r\n        this.visualize=this.visualize.bind(this);\r\n        this.clearVisited=this.clearVisited.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const grid=this.getGrid();\r\n        this.setState({grid});\r\n    }\r\n    createNode(col,row){\r\n        return{\r\n            col,\r\n            row,\r\n            isStart:row === this.state.START_NODE_ROW && col===  this.state.START_NODE_COL,\r\n            isEnd:  row === this.state.END_NODE_ROW   && col === this.state.END_NODE_COL,\r\n            distance: Infinity,\r\n            totalDistance:Infinity,\r\n            heuristicDistance:null,\r\n            direction:null,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    }\r\n    getGrid() {\r\n        const grid = [];\r\n        for(let row=0;row<this.props.nrows;row++){\r\n            const currentRow = [];\r\n            for(let col=0;col<this.props.ncols;col++){\r\n                currentRow.push(this.createNode(col,row));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }\r\n    clearVisited(){\r\n        const {grid}=this.state;\r\n        for(let row=0;row<this.props.nrows;row++){\r\n            for(let col=0;col<this.props.ncols;col++){\r\n                if(!grid[row][col].isWall){\r\n                    if(grid[row][col].isStart){\r\n                        document.getElementById(`${row}-${col}`).className ='node-start';\r\n                    }\r\n                    else if(grid[row][col].isEnd){\r\n                        document.getElementById(`${row}-${col}`).className ='node-end';\r\n                    }\r\n                    else{ \r\n                        document.getElementById(`${row}-${col}`).className ='node';\r\n                    }\r\n                }\r\n                grid[row][col].isVisited=false;\r\n            }\r\n        }\r\n        this.setState({grid:grid});\r\n    }\r\n\r\n    visualize(){\r\n        this.clearVisited();\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n        const endNode = grid[this.state.END_NODE_ROW][this.state.END_NODE_COL];\r\n        let result;\r\n        if(this.state.algo === \"Dijkstra's\"){\r\n            result = dijkstra(grid, startNode, endNode);\r\n\r\n        }\r\n        else if(this.state.algo === \"A*\"){\r\n            result = astar(grid, startNode, endNode);\r\n        }\r\n        else if(this.state.algo === \"BreadthFirstSearch\"){\r\n            result = BreadthFirstSearch(grid, startNode, endNode);\r\n        }\r\n        else if(this.state.algo === \"DepthFirstSearch\"){\r\n            result = DepthFirstSearch(grid, startNode, endNode);\r\n        }\r\n        animateVisitOrder(result.visitedOrder,result.path);\r\n    }\r\n\r\n    toggleWall(row, col){\r\n        const newgrid = this.state.grid;\r\n        const node = newgrid[row][col];\r\n        const newnode = {\r\n            ...node,\r\n            isWall:!node.isWall,\r\n        }\r\n        newgrid[node.row][node.col]=newnode;\r\n        this.setState({grid:newgrid});\r\n    }\r\n    handleMouseDown(row, col) {\r\n        if(!this.state.isMouseDown)\r\n            this.setState({isMouseDown:true});\r\n        this.toggleWall(row, col);\r\n    }\r\n    handleMouseEnter(row, col) {\r\n        if(this.state.isMouseDown)\r\n            this.toggleWall(row, col);\r\n    }\r\n    handleMouseUp(){\r\n        this.setState({isMouseDown:false});\r\n    }     \r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <>\r\n                <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                    <a \r\n                        href=\"#\" \r\n                        className=\"navbar-brand\"\r\n                    > \r\n                        Pathfinding Visualiser\r\n                    </a>\r\n                    <button \r\n                        className=\"btn btn-success\" \r\n                        onClick={this.visualize}\r\n                    >\r\n                        Visualize {this.state.algo} Algorithm\r\n                    </button>\r\n                    <button \r\n                        className=\"btn btn-secondary\" \r\n                        onClick={this.clearVisited}\r\n                    >\r\n                        Refresh\r\n                    </button>\r\n                    <li className=\"nav-item dropdown\">\r\n                        <span className=\"nav-link dropdown-toggle\"  id=\"navbarDropdownMenuLink\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n                            {this.state.algo}\r\n                        </span>\r\n                        <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdownMenuLink\">\r\n                            <span className=\"dropdown-item\" onClick={()=>this.setState({algo:\"Dijkstra's\"})}>Dijkstra's Algorithm</span>\r\n                            <span className=\"dropdown-item\" onClick={()=>this.setState({algo:\"A*\"})}>A* Algorithm</span>\r\n                            <span className=\"dropdown-item\" onClick={()=>this.setState({algo:\"BreadthFirstSearch\"})}>BreadthFirstSearch Algorithm</span>\r\n                            <span className=\"dropdown-item\" onClick={()=>this.setState({algo:\"DepthFirstSearch\"})}>DepthFirstSearch Algorithm</span>\r\n                        </div>\r\n                    </li>\r\n                </nav>\r\n                <table className=\"grid\">\r\n                    <tbody>\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <tr className='row' key ={rowIdx} >\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    return (\r\n                                        <Node\r\n                                            key = {`${rowIdx}-${nodeIdx}`}\r\n                                            {...node}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </tr>\r\n                        ); \r\n                    })}\r\n                    </tbody>\r\n                </table>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n/*function createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        totalDistance:Infinity,\r\n        heuristicDistance:null,\r\n        direction:null,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}*/\r\nfunction animateVisitOrder(visitedOrder, path) {\r\n    for (let i = 0; i <= visitedOrder.length; i++) {\r\n      if (i === visitedOrder.length) {\r\n        setTimeout(() => {\r\n          animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedOrder[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className ='node node-visited';\r\n      }, 10 * i);\r\n    }\r\n}\r\nfunction animatePath(path) {\r\n    for (let i = 0; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}