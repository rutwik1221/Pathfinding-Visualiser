{"ast":null,"code":"export function BreadthFirstSearch(grid, startNode, endNode) {\n  let visitedNodesInOrder = [];\n  let unvisitedNodes = [];\n  startNode.isVisited = true;\n  unvisitedNodes.push(startNode);\n\n  while (unvisitedNodes.length > 0) {\n    let currentNode = unvisitedNodes.shift();\n    visitedNodesInOrder.push(currentNode);\n\n    if (currentNode === endNode) {\n      return {\n        visitedOrder: visitedNodesInOrder,\n        path: visitedNodesInOrder\n      };\n    }\n\n    currentNode.isVisited = true;\n    unvisitedNodes.push(...getUnvisitedNeighbours(currentNode, grid));\n  }\n}\nexport function DepthFirstSearch(grid, startNode, endNode) {\n  let visitedNodesInOrder = [];\n  let unvisitedNodes = [];\n  startNode.isVisited = true;\n  unvisitedNodes.unshift(startNode);\n\n  while (unvisitedNodes.length > 0) {\n    let currentNode = unvisitedNodes.shift();\n    visitedNodesInOrder.push(currentNode);\n\n    if (currentNode === endNode) {\n      return {\n        visitedOrder: visitedNodesInOrder,\n        path: visitedNodesInOrder\n      };\n    }\n\n    currentNode.isVisited = true;\n    unvisitedNodes.unshift(...getUnvisitedNeighbours(currentNode, grid));\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    neighbours.push(grid[row - 1][col]);\n  }\n\n  if (row < grid.length - 1) {\n    neighbours.push(grid[row + 1][col]);\n  }\n\n  if (col > 0) {\n    neighbours.push(grid[row][col - 1]);\n  }\n\n  if (col < grid[0].length - 1) {\n    neighbours.push(grid[row][col + 1]);\n  }\n\n  return neighbours.filter(neighbour => !neighbour.isVisited && !neighbour.isWall);\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/algorithms/BreadthFirstSearch.js"],"names":["BreadthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","unvisitedNodes","isVisited","push","length","currentNode","shift","visitedOrder","path","getUnvisitedNeighbours","DepthFirstSearch","unshift","node","neighbours","col","row","filter","neighbour","isWall"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,IAA5B,EAAiCC,SAAjC,EAA2CC,OAA3C,EAAmD;AACtD,MAAIC,mBAAmB,GAAG,EAA1B;AACA,MAAIC,cAAc,GAAC,EAAnB;AACAH,EAAAA,SAAS,CAACI,SAAV,GAAoB,IAApB;AACAD,EAAAA,cAAc,CAACE,IAAf,CAAoBL,SAApB;;AACA,SAAMG,cAAc,CAACG,MAAf,GAAsB,CAA5B,EAA8B;AAC1B,QAAIC,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAAlB;AACAN,IAAAA,mBAAmB,CAACG,IAApB,CAAyBE,WAAzB;;AACA,QAAGA,WAAW,KAAGN,OAAjB,EAAyB;AACrB,aAAO;AACfQ,QAAAA,YAAY,EAACP,mBADE;AAEfQ,QAAAA,IAAI,EAACR;AAFU,OAAP;AAIH;;AACDK,IAAAA,WAAW,CAACH,SAAZ,GAAsB,IAAtB;AACAD,IAAAA,cAAc,CAACE,IAAf,CAAoB,GAAGM,sBAAsB,CAACJ,WAAD,EAAaR,IAAb,CAA7C;AACH;AACJ;AACD,OAAO,SAASa,gBAAT,CAA0Bb,IAA1B,EAA+BC,SAA/B,EAAyCC,OAAzC,EAAiD;AACpD,MAAIC,mBAAmB,GAAG,EAA1B;AACA,MAAIC,cAAc,GAAC,EAAnB;AACAH,EAAAA,SAAS,CAACI,SAAV,GAAoB,IAApB;AACAD,EAAAA,cAAc,CAACU,OAAf,CAAuBb,SAAvB;;AACA,SAAMG,cAAc,CAACG,MAAf,GAAsB,CAA5B,EAA8B;AAC1B,QAAIC,WAAW,GAAGJ,cAAc,CAACK,KAAf,EAAlB;AACAN,IAAAA,mBAAmB,CAACG,IAApB,CAAyBE,WAAzB;;AACA,QAAGA,WAAW,KAAGN,OAAjB,EAAyB;AACrB,aAAO;AACfQ,QAAAA,YAAY,EAACP,mBADE;AAEfQ,QAAAA,IAAI,EAACR;AAFU,OAAP;AAIH;;AACDK,IAAAA,WAAW,CAACH,SAAZ,GAAsB,IAAtB;AACAD,IAAAA,cAAc,CAACU,OAAf,CAAuB,GAAGF,sBAAsB,CAACJ,WAAD,EAAaR,IAAb,CAAhD;AACH;AACJ;;AACD,SAASY,sBAAT,CAAgCG,IAAhC,EAAsCf,IAAtC,EAA4C;AACxC,QAAMgB,UAAU,GAAG,EAAnB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaH,IAAnB;;AACA,MAAIG,GAAG,GAAG,CAAV,EAAY;AACRF,IAAAA,UAAU,CAACV,IAAX,CAAgBN,IAAI,CAACkB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAhB;AACH;;AACD,MAAIC,GAAG,GAAGlB,IAAI,CAACO,MAAL,GAAc,CAAxB,EAA0B;AACtBS,IAAAA,UAAU,CAACV,IAAX,CAAgBN,IAAI,CAACkB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAhB;AACH;;AACD,MAAIA,GAAG,GAAG,CAAV,EAAY;AACRD,IAAAA,UAAU,CAACV,IAAX,CAAgBN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAhB;AACH;;AACD,MAAIA,GAAG,GAAGjB,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAiB,CAA3B,EAA6B;AACzBS,IAAAA,UAAU,CAACV,IAAX,CAAgBN,IAAI,CAACkB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAhB;AACH;;AACD,SAAOD,UAAU,CAACG,MAAX,CAAkBC,SAAS,IAAI,CAACA,SAAS,CAACf,SAAX,IAAsB,CAACe,SAAS,CAACC,MAAhE,CAAP;AACH","sourcesContent":["export function BreadthFirstSearch(grid,startNode,endNode){\r\n    let visitedNodesInOrder = [];\r\n    let unvisitedNodes=[];\r\n    startNode.isVisited=true;\r\n    unvisitedNodes.push(startNode);\r\n    while(unvisitedNodes.length>0){\r\n        let currentNode = unvisitedNodes.shift();\r\n        visitedNodesInOrder.push(currentNode);\r\n        if(currentNode===endNode){\r\n            return {\r\n\t\t\t\tvisitedOrder:visitedNodesInOrder,\r\n\t\t\t\tpath:visitedNodesInOrder,\r\n\t\t\t};\r\n        }\r\n        currentNode.isVisited=true;\r\n        unvisitedNodes.push(...getUnvisitedNeighbours(currentNode,grid));     \r\n    }\r\n}\r\nexport function DepthFirstSearch(grid,startNode,endNode){\r\n    let visitedNodesInOrder = [];\r\n    let unvisitedNodes=[];\r\n    startNode.isVisited=true;\r\n    unvisitedNodes.unshift(startNode);\r\n    while(unvisitedNodes.length>0){\r\n        let currentNode = unvisitedNodes.shift();\r\n        visitedNodesInOrder.push(currentNode);\r\n        if(currentNode===endNode){\r\n            return {\r\n\t\t\t\tvisitedOrder:visitedNodesInOrder,\r\n\t\t\t\tpath:visitedNodesInOrder,\r\n\t\t\t};\r\n        }\r\n        currentNode.isVisited=true;\r\n        unvisitedNodes.unshift(...getUnvisitedNeighbours(currentNode,grid));     \r\n    }\r\n}\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n    const neighbours = [];\r\n    const {col, row} = node;\r\n    if (row > 0){\r\n        neighbours.push(grid[row - 1][col]);\r\n    } \r\n    if (row < grid.length - 1){\r\n        neighbours.push(grid[row + 1][col]);\r\n    }\r\n    if (col > 0){\r\n        neighbours.push(grid[row][col - 1]);\r\n    }\r\n    if (col < grid[0].length - 1){\r\n        neighbours.push(grid[row][col + 1]);\r\n    }\r\n    return neighbours.filter(neighbour => !neighbour.isVisited&&!neighbour.isWall);\r\n}"]},"metadata":{},"sourceType":"module"}