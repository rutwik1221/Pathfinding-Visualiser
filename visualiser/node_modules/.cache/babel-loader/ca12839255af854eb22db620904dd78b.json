{"ast":null,"code":"var _jsxFileName = \"D:\\\\rutwik\\\\Documents\\\\New folder\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component } from 'react';\nimport Node from \"./Node/Node\";\nimport \"./pfv.css\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\nexport default class PFV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n      isMouseDown: false\n    };\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\n    const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\n    const visitedOrder = dijkstra(grid, startNode, endNode);\n    const path = shortestPath(endNode);\n    animateVisitOrder(visitedOrder, path);\n  }\n\n  toggleWall(row, col) {\n    const newgrid = this.state.grid;\n    const node = newgrid[row][col];\n    const newnode = { ...node,\n      isWall: !node.isWall\n    };\n    newgrid[node.row][node.col] = newnode;\n    this.setState({\n      grid: newgrid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (!this.state.isMouseDown) this.setState({\n      isMouseDown: true\n    });\n    this.toggleWall(row, col);\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.isMouseDown) this.toggleWall(row, col);\n  }\n\n  handleMouseUp() {\n    this.setState({\n      isMouseDown: false\n    });\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }\n    }, makeGrid())\n    /*<>\r\n        <button onClick={this.visualizeDijkstra}>\r\n            Visualize\r\n        </button>\r\n        <div className=\"grid\">\r\n            {grid.map((row,rowIdx)=>{\r\n                return (\r\n                    <div classname='row' key ={rowIdx} >\r\n                        {row.map((node,nodeIdx)=>{\r\n                            return (\r\n                                <Node\r\n                                    key = {`${rowIdx}-${nodeIdx}`}\r\n                                    {...node}\r\n                                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                    onMouseUp={() => this.handleMouseUp()}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                ); \r\n            })}\r\n        </div>\r\n    </>*/\n    ;\n  }\n\n} //onClick ={() =>{console.log(`Hi from ${rowIdx}`);}}\n\nPFV.defaultProps = {\n  START_NODE_ROW: START_NODE_ROW,\n  START_NODE_COL: START_NODE_COL,\n  END_NODE_ROW: END_NODE_ROW,\n  END_NODE_COL: END_NODE_COL,\n  nrows: 50,\n  ncols: 20\n};\n\nfunction getGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction makeGrid() {\n  let grid = [];\n\n  for (let x = 0; x < 20; x++) {\n    let row = [];\n\n    for (let y = 0; y < 50; y++) {\n      row.push( /*#__PURE__*/React.createElement(Node, Object.assign({\n        key: `${x}-${y}`\n      }, createNode(x, y), {\n        onMouseDown: (row, col) => this.handleMouseDown(row, col),\n        onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n        onMouseUp: () => this.handleMouseUp(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      })));\n    }\n\n    grid.push( /*#__PURE__*/React.createElement(\"tr\", {\n      key: x,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 19\n      }\n    }, row));\n  }\n\n  return /*#__PURE__*/React.createElement(\"table\", {\n    className: \"Grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, grid));\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n}\n\nfunction animateVisitOrder(visitedOrder, path) {\n  for (let i = 0; i <= visitedOrder.length; i++) {\n    if (i === visitedOrder.length) {\n      setTimeout(() => {\n        animatePath(path);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedOrder[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animatePath(path) {\n  for (let i = 0; i < path.length; i++) {\n    setTimeout(() => {\n      const node = path[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","Node","dijkstra","shortestPath","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","PFV","constructor","props","state","grid","isMouseDown","visualizeDijkstra","bind","componentDidMount","getGrid","setState","startNode","endNode","visitedOrder","path","animateVisitOrder","toggleWall","row","col","newgrid","node","newnode","isWall","handleMouseDown","handleMouseEnter","handleMouseUp","render","makeGrid","defaultProps","nrows","ncols","currentRow","push","createNode","x","y","isStart","isEnd","distance","Infinity","isVisited","previousNode","i","length","setTimeout","animatePath","document","getElementById","className"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport \"./pfv.css\";\r\nimport {dijkstra,shortestPath} from\"../algorithms/dijkstra.js\"\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst END_NODE_ROW = 10;\r\nconst END_NODE_COL = 35;\r\n\r\nexport default class PFV extends Component{\r\n    static defaultProps = {\r\n        START_NODE_ROW : START_NODE_ROW,\r\n        START_NODE_COL : START_NODE_COL,\r\n        END_NODE_ROW : END_NODE_ROW,\r\n        END_NODE_COL : END_NODE_COL,\r\n        nrows:50,\r\n        ncols:20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: [],\r\n            isMouseDown : false,\r\n        };\r\n        this.visualizeDijkstra=this.visualizeDijkstra.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n    visualizeDijkstra(){\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\r\n        const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\r\n        const visitedOrder = dijkstra(grid, startNode, endNode);\r\n        const path = shortestPath(endNode);\r\n        animateVisitOrder(visitedOrder,path);\r\n    }\r\n    toggleWall(row, col){\r\n        const newgrid = this.state.grid;\r\n        const node = newgrid[row][col];\r\n        const newnode = {\r\n            ...node,\r\n            isWall:!node.isWall,\r\n        }\r\n        newgrid[node.row][node.col]=newnode;\r\n        this.setState({grid:newgrid});\r\n    }\r\n    handleMouseDown(row, col) {\r\n        if(!this.state.isMouseDown)\r\n            this.setState({isMouseDown:true});\r\n        this.toggleWall(row, col);\r\n    }\r\n    handleMouseEnter(row, col) {\r\n        if(this.state.isMouseDown)\r\n            this.toggleWall(row, col);\r\n    }\r\n    \r\n\r\n    handleMouseUp(){\r\n        this.setState({isMouseDown:false});\r\n    }     \r\n    render(){\r\n        const {grid} = this.state;\r\n        return(\r\n            <div>\r\n                {makeGrid()}\r\n            </div>\r\n            /*<>\r\n                <button onClick={this.visualizeDijkstra}>\r\n                    Visualize\r\n                </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <div classname='row' key ={rowIdx} >\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    return (\r\n                                        <Node\r\n                                            key = {`${rowIdx}-${nodeIdx}`}\r\n                                            {...node}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ); \r\n                    })}\r\n                </div>\r\n            </>*/\r\n        );\r\n    }\r\n}\r\n//onClick ={() =>{console.log(`Hi from ${rowIdx}`);}}\r\nfunction getGrid() {\r\n    const grid = [];\r\n    for(let row=0;row<20;row++){\r\n        const currentRow = [];\r\n        for(let col=0;col<50;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\nfunction makeGrid(){\r\n    let grid=[];\r\n    for(let x =0;x<20;x++){\r\n        let row=[];\r\n        for(let y = 0;y<50;y++){\r\n            row.push(\r\n                <Node\r\n                    key = {`${x}-${y}`}\r\n                    {...createNode(x,y)}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                />\r\n            );\r\n        }\r\n        grid.push(<tr key={x}>{row}</tr>)\r\n    }\r\n    return (\r\n        <table className='Grid'>\r\n            <tbody>{grid}</tbody>\r\n        </table>\r\n    )\r\n}\r\nfunction createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}\r\nfunction animateVisitOrder(visitedOrder, path) {\r\n    for (let i = 0; i <= visitedOrder.length; i++) {\r\n      if (i === visitedOrder.length) {\r\n        setTimeout(() => {\r\n          animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedOrder[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className ='node node-visited';\r\n      }, 10 * i);\r\n    }\r\n}\r\nfunction animatePath(path) {\r\n    for (let i = 0; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}