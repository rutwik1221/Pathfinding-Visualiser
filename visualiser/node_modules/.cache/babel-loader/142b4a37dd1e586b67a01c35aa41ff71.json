{"ast":null,"code":"/*export function astar(grid, start, end) {\r\n    if (start === end) {\r\n    \treturn false;\r\n    }\r\n\tlet openSet= new Set();\r\n\topenSet.add(start);\r\n    let cameFrom = new Map();\r\n\tlet gScore = new Map();\r\n\tgScore.set(start,0);\r\n\tlet fscore = new Map();\r\n\tfscore.set(start,manhattanDistance(start,end))\r\n\tconsole.log(openSet);\r\n\tconsole.log(fscore);\r\n\tconsole.log(gScore);\r\n    while(openSet.size>0){\r\n    \tlet current = min(fscore);\r\n    \tif(current===end){\r\n        \treturn shortestPath(end);\r\n    \t}\r\n    \topenSet.delete(current);\r\n\t\tlet neighbours = getNeighbours(grid,current);\r\n\t\tfor(let node of neighbours){\r\n\t\t\tlet tentative_gScore = gScore.get(current) + 1;\r\n\t\t\tif(tentative_gScore<gScore.get(node)){\r\n\t\t\t\tcameFrom.set(node,current);\r\n\t\t\t\tgScore.set(node,tentative_gScore);\r\n\t\t\t\tfscore.set(node,gScore.get(node)+manhattanDistance(node,end));\r\n\t\t\t\tif(!openSet.has(node)){\r\n\t\t\t\t\topenSet.add(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\nfunction min(fscore){\r\n\tlet minKey, minVal=99999;\r\n\tfor(let [key,value] of fscore){\r\n    \tif(value<minVal){\r\n        \tminVal=value;\r\n        \tminKey=key\r\n    \t}\r\n\t}\r\n    return minKey;\r\n}\r\nfunction getNeighbours(grid,current){\r\n\tlet neighbours=[];  \r\n\tif(current.row===0){\r\n\t\tif(current.col===0){\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t}\r\n\t\telse if(current.col===49){\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t}\r\n\telse if(current.row===19){\r\n\t\tif(current.col===0){\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t}\r\n\t\telse if(current.col===49){\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t}\r\n\telse if(current.col===0){\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t}\r\n\telse if(current.col===49){\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t}\r\n\telse{\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t}\r\n\treturn neighbours.filter(n => !n.isWall);\r\n} \r\nfunction manhattanDistance(n1, n2) {\r\n\tlet x=Math.abs(n2.row-n1.row);\r\n\tlet y=Math.abs(n2.col-n2.col);\r\n\treturn (x+y);\r\n}\r\nfunction shortestPath(node){\r\n    const path = [];\r\n    while(node!==null){\r\n        path.puah(node);\r\n        node = node.previousNode;\r\n    }\r\n    return path;\r\n}*/\nexport function astar(grid, start, end) {\n  if (!start || !end || start === end) {\n    return false;\n  }\n\n  let visitedNodesInOrder = [];\n  start.distance = 0;\n  start.totalDistance = 0;\n  start.direction = \"up\";\n  let unvisitedNodes = getNodes(grid);\n\n  while (unvisitedNodes.length) {\n    unvisitedNodes.sort((a, b) => a.distance - b.distance);\n    let currentNode = unvisitedNodes.shift();\n    if (currentNode.distance === Infinity) return false;\n    visitedNodesInOrder.push(currentNode);\n    currentNode.isVisited = true;\n    ;\n\n    if (currentNode === end) {\n      return visitedNodesInOrder;\n    }\n\n    updateNeighbors(grid, currentNode, end, start);\n  }\n}\n\nfunction getNodes(grid) {\n  let nodes = [];\n\n  for (const row of grid) {\n    for (const node of row) {\n      if (!node.isWall) {\n        nodes.push(node);\n      }\n    }\n  }\n\n  return nodes;\n}\n\nfunction closestNode(nodes, unvisitedNodes) {\n  let currentClosest, index;\n\n  for (let i = 0; i < unvisitedNodes.length; i++) {\n    if (!currentClosest || currentClosest.totalDistance > nodes[unvisitedNodes[i]].totalDistance) {\n      currentClosest = nodes[unvisitedNodes[i]];\n      index = i;\n    } else if (currentClosest.totalDistance === nodes[unvisitedNodes[i]].totalDistance) {\n      if (currentClosest.heuristicDistance > nodes[unvisitedNodes[i]].heuristicDistance) {\n        currentClosest = nodes[unvisitedNodes[i]];\n        index = i;\n      }\n    }\n  }\n\n  unvisitedNodes.splice(index, 1);\n  return currentClosest;\n}\n\nfunction getNeighbours(node, grid) {\n  const neighbours = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    neighbours.push(grid[row - 1][col]);\n  }\n\n  if (row < grid.length - 1) {\n    neighbours.push(grid[row + 1][col]);\n  }\n\n  if (col > 0) {\n    neighbours.push(grid[row][col - 1]);\n  }\n\n  if (col < grid[0].length - 1) {\n    neighbours.push(grid[row][col + 1]);\n  }\n\n  return neighbours.filter(neighbour => !neighbour.isWall);\n}\n\nfunction updateNeighbors(grid, currentNode, start, end) {\n  let neighbors = getNeighbours(currentNode, grid);\n\n  for (let neighbor of neighbors) {\n    if (end) {\n      updateNode(node, nodes[neighbor], nodes[end], name, nodes, nodes[start], heuristic, boardArray);\n    } else {\n      updateNode(node, nodes[neighbor]);\n    }\n  }\n}\n\nfunction updateNode(currentNode, endNode, actualTargetNode, name, nodes, actualStartNode, heuristic, boardArray) {\n  let distance = getDistance(currentNode, endNode);\n  if (!endNode.heuristicDistance) endNode.heuristicDistance = manhattanDistance(endNode, actualTargetNode);\n  let distanceToCompare = currentNode.distance + endNode.weight + distance[0];\n\n  if (distanceToCompare < endNode.distance) {\n    endNode.distance = distanceToCompare;\n    endNode.totalDistance = endNode.distance + endNode.heuristicDistance;\n    endNode.previousNode = currentNode.id;\n    endNode.path = distance[1];\n    endNode.direction = distance[2];\n  }\n}\n\nfunction getNeighbors(id, nodes, boardArray) {\n  let coordinates = id.split(\"-\");\n  let x = parseInt(coordinates[0]);\n  let y = parseInt(coordinates[1]);\n  let neighbors = [];\n  let potentialNeighbor;\n\n  if (boardArray[x - 1] && boardArray[x - 1][y]) {\n    potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`;\n    if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\n  }\n\n  if (boardArray[x + 1] && boardArray[x + 1][y]) {\n    potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`;\n    if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\n  }\n\n  if (boardArray[x][y - 1]) {\n    potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`;\n    if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\n  }\n\n  if (boardArray[x][y + 1]) {\n    potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`;\n    if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\n  }\n\n  return neighbors;\n}\n\nfunction getDistance(nodeOne, nodeTwo) {\n  let currentCoordinates = nodeOne.id.split(\"-\");\n  let endCoordinates = nodeTwo.id.split(\"-\");\n  let x1 = parseInt(currentCoordinates[0]);\n  let y1 = parseInt(currentCoordinates[1]);\n  let x2 = parseInt(endCoordinates[0]);\n  let y2 = parseInt(endCoordinates[1]);\n\n  if (x2 < x1 && y1 === y2) {\n    if (nodeOne.direction === \"up\") {\n      return [1, [\"f\"], \"up\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [2, [\"l\", \"f\"], \"up\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [2, [\"r\", \"f\"], \"up\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [3, [\"r\", \"r\", \"f\"], \"up\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [1.5, null, \"up\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [2.5, null, \"up\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [1.5, null, \"up\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [2.5, null, \"up\"];\n    }\n  } else if (x2 > x1 && y1 === y2) {\n    if (nodeOne.direction === \"up\") {\n      return [3, [\"r\", \"r\", \"f\"], \"down\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [2, [\"r\", \"f\"], \"down\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [2, [\"l\", \"f\"], \"down\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [1, [\"f\"], \"down\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [2.5, null, \"down\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [1.5, null, \"down\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [2.5, null, \"down\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [1.5, null, \"down\"];\n    }\n  }\n\n  if (y2 < y1 && x1 === x2) {\n    if (nodeOne.direction === \"up\") {\n      return [2, [\"l\", \"f\"], \"left\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [3, [\"l\", \"l\", \"f\"], \"left\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [1, [\"f\"], \"left\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [2, [\"r\", \"f\"], \"left\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [2.5, null, \"left\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [2.5, null, \"left\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [1.5, null, \"left\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [1.5, null, \"left\"];\n    }\n  } else if (y2 > y1 && x1 === x2) {\n    if (nodeOne.direction === \"up\") {\n      return [2, [\"r\", \"f\"], \"right\"];\n    } else if (nodeOne.direction === \"right\") {\n      return [1, [\"f\"], \"right\"];\n    } else if (nodeOne.direction === \"left\") {\n      return [3, [\"r\", \"r\", \"f\"], \"right\"];\n    } else if (nodeOne.direction === \"down\") {\n      return [2, [\"l\", \"f\"], \"right\"];\n    } else if (nodeOne.direction === \"up-right\") {\n      return [1.5, null, \"right\"];\n    } else if (nodeOne.direction === \"down-right\") {\n      return [1.5, null, \"right\"];\n    } else if (nodeOne.direction === \"up-left\") {\n      return [2.5, null, \"right\"];\n    } else if (nodeOne.direction === \"down-left\") {\n      return [2.5, null, \"right\"];\n    }\n  }\n}\n\nfunction manhattanDistance(nodeOne, nodeTwo) {\n  let nodeOneCoordinates = nodeOne.id.split(\"-\").map(ele => parseInt(ele));\n  let nodeTwoCoordinates = nodeTwo.id.split(\"-\").map(ele => parseInt(ele));\n  let xOne = nodeOneCoordinates[0];\n  let xTwo = nodeTwoCoordinates[0];\n  let yOne = nodeOneCoordinates[1];\n  let yTwo = nodeTwoCoordinates[1];\n  let xChange = Math.abs(xOne - xTwo);\n  let yChange = Math.abs(yOne - yTwo);\n  return xChange + yChange;\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/algorithms/astar.js"],"names":["astar","grid","start","end","visitedNodesInOrder","distance","totalDistance","direction","unvisitedNodes","getNodes","length","sort","a","b","currentNode","shift","Infinity","push","isVisited","updateNeighbors","nodes","row","node","isWall","closestNode","currentClosest","index","i","heuristicDistance","splice","getNeighbours","neighbours","col","filter","neighbour","neighbors","neighbor","updateNode","name","heuristic","boardArray","endNode","actualTargetNode","actualStartNode","getDistance","manhattanDistance","distanceToCompare","weight","previousNode","id","path","getNeighbors","coordinates","split","x","parseInt","y","potentialNeighbor","toString","status","nodeOne","nodeTwo","currentCoordinates","endCoordinates","x1","y1","x2","y2","nodeOneCoordinates","map","ele","nodeTwoCoordinates","xOne","xTwo","yOne","yTwo","xChange","Math","abs","yChange"],"mappings":"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","sourcesContent":["/*export function astar(grid, start, end) {\r\n    if (start === end) {\r\n    \treturn false;\r\n    }\r\n\tlet openSet= new Set();\r\n\topenSet.add(start);\r\n    let cameFrom = new Map();\r\n\tlet gScore = new Map();\r\n\tgScore.set(start,0);\r\n\tlet fscore = new Map();\r\n\tfscore.set(start,manhattanDistance(start,end))\r\n\tconsole.log(openSet);\r\n\tconsole.log(fscore);\r\n\tconsole.log(gScore);\r\n    while(openSet.size>0){\r\n    \tlet current = min(fscore);\r\n    \tif(current===end){\r\n        \treturn shortestPath(end);\r\n    \t}\r\n    \topenSet.delete(current);\r\n\t\tlet neighbours = getNeighbours(grid,current);\r\n\t\tfor(let node of neighbours){\r\n\t\t\tlet tentative_gScore = gScore.get(current) + 1;\r\n\t\t\tif(tentative_gScore<gScore.get(node)){\r\n\t\t\t\tcameFrom.set(node,current);\r\n\t\t\t\tgScore.set(node,tentative_gScore);\r\n\t\t\t\tfscore.set(node,gScore.get(node)+manhattanDistance(node,end));\r\n\t\t\t\tif(!openSet.has(node)){\r\n\t\t\t\t\topenSet.add(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n}\r\nfunction min(fscore){\r\n\tlet minKey, minVal=99999;\r\n\tfor(let [key,value] of fscore){\r\n    \tif(value<minVal){\r\n        \tminVal=value;\r\n        \tminKey=key\r\n    \t}\r\n\t}\r\n    return minKey;\r\n}\r\nfunction getNeighbours(grid,current){\r\n\tlet neighbours=[];  \r\n\tif(current.row===0){\r\n\t\tif(current.col===0){\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t}\r\n\t\telse if(current.col===49){\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t}\r\n\telse if(current.row===19){\r\n\t\tif(current.col===0){\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t}\r\n\t\telse if(current.col===49){\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t\telse{\r\n\t\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t\t}\r\n\t}\r\n\telse if(current.col===0){\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t}\r\n\telse if(current.col===49){\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t}\r\n\telse{\r\n\t\tneighbours.push(grid[current.row+1][current.col]);\r\n\t\tneighbours.push(grid[current.row-1][current.col]);\r\n\t\tneighbours.push(grid[current.row][current.col+1]);\r\n\t\tneighbours.push(grid[current.row][current.col-1]);\r\n\t}\r\n\treturn neighbours.filter(n => !n.isWall);\r\n} \r\nfunction manhattanDistance(n1, n2) {\r\n\tlet x=Math.abs(n2.row-n1.row);\r\n\tlet y=Math.abs(n2.col-n2.col);\r\n\treturn (x+y);\r\n}\r\nfunction shortestPath(node){\r\n    const path = [];\r\n    while(node!==null){\r\n        path.puah(node);\r\n        node = node.previousNode;\r\n    }\r\n    return path;\r\n}*/\r\n\r\nexport function astar(grid, start, end) {\r\n\tif (!start || !end || start === end) {\r\n\t\treturn false;\r\n\t}\r\n\tlet visitedNodesInOrder = [];\r\n\tstart.distance = 0;\r\n\tstart.totalDistance = 0;\r\n\tstart.direction = \"up\";\r\n\tlet unvisitedNodes=getNodes(grid);\r\n\twhile (unvisitedNodes.length) {\r\n\t\tunvisitedNodes.sort((a,b) => a.distance - b.distance);\r\n\t\tlet currentNode = unvisitedNodes.shift();\r\n\t\tif (currentNode.distance === Infinity) \r\n\t\t  \treturn false;\r\n\t\tvisitedNodesInOrder.push(currentNode);\r\n\t  \tcurrentNode.isVisited=true;;\r\n\t  \tif (currentNode === end) {\r\n\t\t\treturn visitedNodesInOrder;\r\n\t  \t}\r\n\t  \tupdateNeighbors(grid, currentNode, end, start);\r\n\t}\r\n}\r\nfunction getNodes(grid){\r\n\tlet nodes = [];\r\n\t\tfor(const row of grid){\r\n\t\t\tfor(const node of row){\r\n\t\t\t\tif(!node.isWall){\r\n\t\t\t\t\tnodes.push(node);\r\n\t\t\t\t}\r\n\t\t \t}\r\n\t \t}\r\n\treturn nodes;\r\n}\r\n\r\nfunction closestNode(nodes, unvisitedNodes) {\r\n\tlet currentClosest, index;\r\n\tfor (let i = 0; i < unvisitedNodes.length; i++) {\r\n\t  if (!currentClosest || currentClosest.totalDistance > nodes[unvisitedNodes[i]].totalDistance) {\r\n\t\tcurrentClosest = nodes[unvisitedNodes[i]];\r\n\t\tindex = i;\r\n\t  } else if (currentClosest.totalDistance === nodes[unvisitedNodes[i]].totalDistance) {\r\n\t\tif (currentClosest.heuristicDistance > nodes[unvisitedNodes[i]].heuristicDistance) {\r\n\t\t  currentClosest = nodes[unvisitedNodes[i]];\r\n\t\t  index = i;\r\n\t\t}\r\n\t  }\r\n\t}\r\n\tunvisitedNodes.splice(index, 1);\r\n\treturn currentClosest;\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n    const neighbours = [];\r\n    const {col, row} = node;\r\n    if (row > 0){\r\n        neighbours.push(grid[row - 1][col]);\r\n    } \r\n    if (row < grid.length - 1){\r\n        neighbours.push(grid[row + 1][col]);\r\n    }\r\n    if (col > 0){\r\n        neighbours.push(grid[row][col - 1]);\r\n    }\r\n    if (col < grid[0].length - 1){\r\n        neighbours.push(grid[row][col + 1]);\r\n    }\r\n    return neighbours.filter(neighbour => !neighbour.isWall);\r\n}\r\n\r\nfunction updateNeighbors(grid, currentNode, start, end) {\r\n\tlet neighbors = getNeighbours(currentNode,grid);\r\n\tfor (let neighbor of neighbors) {\r\n\t\tif (end) {\r\n\t\t\tupdateNode(node, nodes[neighbor], nodes[end], name, nodes, nodes[start], heuristic, boardArray);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tupdateNode(node, nodes[neighbor]);\r\n\t  \t}\r\n\t}\r\n}\r\n\r\n  \r\n  function updateNode(currentNode, endNode, actualTargetNode, name, nodes, actualStartNode, heuristic, boardArray) {\r\n\tlet distance = getDistance(currentNode, endNode);\r\n\tif (!endNode.heuristicDistance) endNode.heuristicDistance = manhattanDistance(endNode, actualTargetNode);\r\n\tlet distanceToCompare = currentNode.distance + endNode.weight + distance[0];\r\n\tif (distanceToCompare < endNode.distance) {\r\n\t  endNode.distance = distanceToCompare;\r\n\t  endNode.totalDistance = endNode.distance + endNode.heuristicDistance;\r\n\t  endNode.previousNode = currentNode.id;\r\n\t  endNode.path = distance[1];\r\n\t  endNode.direction = distance[2];\r\n\t}\r\n  }\r\n  \r\n  function getNeighbors(id, nodes, boardArray) {\r\n\tlet coordinates = id.split(\"-\");\r\n\tlet x = parseInt(coordinates[0]);\r\n\tlet y = parseInt(coordinates[1]);\r\n\tlet neighbors = [];\r\n\tlet potentialNeighbor;\r\n\tif (boardArray[x - 1] && boardArray[x - 1][y]) {\r\n\t  potentialNeighbor = `${(x - 1).toString()}-${y.toString()}`\r\n\t  if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n\t}\r\n\tif (boardArray[x + 1] && boardArray[x + 1][y]) {\r\n\t  potentialNeighbor = `${(x + 1).toString()}-${y.toString()}`\r\n\t  if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n\t}\r\n\tif (boardArray[x][y - 1]) {\r\n\t  potentialNeighbor = `${x.toString()}-${(y - 1).toString()}`\r\n\t  if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n\t}\r\n\tif (boardArray[x][y + 1]) {\r\n\t  potentialNeighbor = `${x.toString()}-${(y + 1).toString()}`\r\n\t  if (nodes[potentialNeighbor].status !== \"wall\") neighbors.push(potentialNeighbor);\r\n\t}\r\n\treturn neighbors;\r\n  }\r\n  \r\n  \r\n  function getDistance(nodeOne, nodeTwo) {\r\n\tlet currentCoordinates = nodeOne.id.split(\"-\");\r\n\tlet endCoordinates = nodeTwo.id.split(\"-\");\r\n\tlet x1 = parseInt(currentCoordinates[0]);\r\n\tlet y1 = parseInt(currentCoordinates[1]);\r\n\tlet x2 = parseInt(endCoordinates[0]);\r\n\tlet y2 = parseInt(endCoordinates[1]);\r\n\tif (x2 < x1 && y1 === y2) {\r\n\t  if (nodeOne.direction === \"up\") {\r\n\t\treturn [1, [\"f\"], \"up\"];\r\n\t  } else if (nodeOne.direction === \"right\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"up\"];\r\n\t  } else if (nodeOne.direction === \"left\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"up\"];\r\n\t  } else if (nodeOne.direction === \"down\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"up\"];\r\n\t  } else if (nodeOne.direction === \"up-right\") {\r\n\t\treturn [1.5, null, \"up\"];\r\n\t  } else if (nodeOne.direction === \"down-right\") {\r\n\t\treturn [2.5, null, \"up\"];\r\n\t  } else if (nodeOne.direction === \"up-left\") {\r\n\t\treturn [1.5, null, \"up\"];\r\n\t  } else if (nodeOne.direction === \"down-left\") {\r\n\t\treturn [2.5, null, \"up\"];\r\n\t  }\r\n\t} else if (x2 > x1 && y1 === y2) {\r\n\t  if (nodeOne.direction === \"up\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"down\"];\r\n\t  } else if (nodeOne.direction === \"right\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"down\"];\r\n\t  } else if (nodeOne.direction === \"left\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"down\"];\r\n\t  } else if (nodeOne.direction === \"down\") {\r\n\t\treturn [1, [\"f\"], \"down\"];\r\n\t  } else if (nodeOne.direction === \"up-right\") {\r\n\t\treturn [2.5, null, \"down\"];\r\n\t  } else if (nodeOne.direction === \"down-right\") {\r\n\t\treturn [1.5, null, \"down\"];\r\n\t  } else if (nodeOne.direction === \"up-left\") {\r\n\t\treturn [2.5, null, \"down\"];\r\n\t  } else if (nodeOne.direction === \"down-left\") {\r\n\t\treturn [1.5, null, \"down\"];\r\n\t  }\r\n\t}\r\n\tif (y2 < y1 && x1 === x2) {\r\n\t  if (nodeOne.direction === \"up\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"left\"];\r\n\t  } else if (nodeOne.direction === \"right\") {\r\n\t\treturn [3, [\"l\", \"l\", \"f\"], \"left\"];\r\n\t  } else if (nodeOne.direction === \"left\") {\r\n\t\treturn [1, [\"f\"], \"left\"];\r\n\t  } else if (nodeOne.direction === \"down\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"left\"];\r\n\t  } else if (nodeOne.direction === \"up-right\") {\r\n\t\treturn [2.5, null, \"left\"];\r\n\t  } else if (nodeOne.direction === \"down-right\") {\r\n\t\treturn [2.5, null, \"left\"];\r\n\t  } else if (nodeOne.direction === \"up-left\") {\r\n\t\treturn [1.5, null, \"left\"];\r\n\t  } else if (nodeOne.direction === \"down-left\") {\r\n\t\treturn [1.5, null, \"left\"];\r\n\t  }\r\n\t} else if (y2 > y1 && x1 === x2) {\r\n\t  if (nodeOne.direction === \"up\") {\r\n\t\treturn [2, [\"r\", \"f\"], \"right\"];\r\n\t  } else if (nodeOne.direction === \"right\") {\r\n\t\treturn [1, [\"f\"], \"right\"];\r\n\t  } else if (nodeOne.direction === \"left\") {\r\n\t\treturn [3, [\"r\", \"r\", \"f\"], \"right\"];\r\n\t  } else if (nodeOne.direction === \"down\") {\r\n\t\treturn [2, [\"l\", \"f\"], \"right\"];\r\n\t  } else if (nodeOne.direction === \"up-right\") {\r\n\t\treturn [1.5, null, \"right\"];\r\n\t  } else if (nodeOne.direction === \"down-right\") {\r\n\t\treturn [1.5, null, \"right\"];\r\n\t  } else if (nodeOne.direction === \"up-left\") {\r\n\t\treturn [2.5, null, \"right\"];\r\n\t  } else if (nodeOne.direction === \"down-left\") {\r\n\t\treturn [2.5, null, \"right\"];\r\n\t  }\r\n\t}\r\n  }\r\n  \r\n  function manhattanDistance(nodeOne, nodeTwo) {\r\n\tlet nodeOneCoordinates = nodeOne.id.split(\"-\").map(ele => parseInt(ele));\r\n\tlet nodeTwoCoordinates = nodeTwo.id.split(\"-\").map(ele => parseInt(ele));\r\n\tlet xOne = nodeOneCoordinates[0];\r\n\tlet xTwo = nodeTwoCoordinates[0];\r\n\tlet yOne = nodeOneCoordinates[1];\r\n\tlet yTwo = nodeTwoCoordinates[1];\r\n  \r\n\tlet xChange = Math.abs(xOne - xTwo);\r\n\tlet yChange = Math.abs(yOne - yTwo);\r\n  \r\n\treturn (xChange + yChange);\r\n  }\r\n  \r\n  \r\n  \r\n  "]},"metadata":{},"sourceType":"module"}