{"ast":null,"code":"export function BreadthFirstSearch(grid, startNode, endNode) {\n  let visitedNodesInOrder = [];\n  let unvisitedNodes = getUnvisitedNeighbours(startNode, grid);\n  let currentNode = startNode;\n\n  while (unvisitedNodes.length > 0) {\n    currentNode = unvisitedNodes.shift();\n    unvisitedNodes.push(...getUnvisitedNeighbours(currentNode, grid));\n    currentNode.isVisited = true;\n    visitedNodesInOrder.push(currentNode);\n\n    if (currentNode === endNode) {\n      return {\n        visitedOrder: visitedNodesInOrder,\n        path: Path(endNode)\n      };\n    }\n  }\n}\n\nfunction getUnvisitedNeighbours(node, grid) {\n  const neighbours = [];\n  const {\n    col,\n    row\n  } = node;\n\n  if (row > 0) {\n    neighbours.push(grid[row - 1][col]);\n  }\n\n  if (row < grid.length - 1) {\n    neighbours.push(grid[row + 1][col]);\n  }\n\n  if (col > 0) {\n    neighbours.push(grid[row][col - 1]);\n  }\n\n  if (col < grid[0].length - 1) {\n    neighbours.push(grid[row][col + 1]);\n  }\n\n  return neighbours.filter(neighbour => !neighbour.isVisited);\n}\n\nexport function Path(endNode) {\n  const path = [];\n\n  while (endNode !== null) {\n    path.unshift(endNode);\n    endNode = endNode.previousNode;\n  }\n\n  return path;\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/algorithms/BreadthFirstSearch.js"],"names":["BreadthFirstSearch","grid","startNode","endNode","visitedNodesInOrder","unvisitedNodes","getUnvisitedNeighbours","currentNode","length","shift","push","isVisited","visitedOrder","path","Path","node","neighbours","col","row","filter","neighbour","unshift","previousNode"],"mappings":"AAAA,OAAO,SAASA,kBAAT,CAA4BC,IAA5B,EAAiCC,SAAjC,EAA2CC,OAA3C,EAAmD;AACtD,MAAIC,mBAAmB,GAAG,EAA1B;AAEA,MAAIC,cAAc,GAAGC,sBAAsB,CAACJ,SAAD,EAAWD,IAAX,CAA3C;AACA,MAAIM,WAAW,GAAGL,SAAlB;;AACA,SAAMG,cAAc,CAACG,MAAf,GAAsB,CAA5B,EAA8B;AAC1BD,IAAAA,WAAW,GAAGF,cAAc,CAACI,KAAf,EAAd;AACAJ,IAAAA,cAAc,CAACK,IAAf,CAAoB,GAAGJ,sBAAsB,CAACC,WAAD,EAAaN,IAAb,CAA7C;AACAM,IAAAA,WAAW,CAACI,SAAZ,GAAsB,IAAtB;AACAP,IAAAA,mBAAmB,CAACM,IAApB,CAAyBH,WAAzB;;AACA,QAAGA,WAAW,KAAGJ,OAAjB,EAAyB;AACrB,aAAO;AACfS,QAAAA,YAAY,EAACR,mBADE;AAEfS,QAAAA,IAAI,EAACC,IAAI,CAACX,OAAD;AAFM,OAAP;AAIH;AACJ;AACJ;;AAED,SAASG,sBAAT,CAAgCS,IAAhC,EAAsCd,IAAtC,EAA4C;AACxC,QAAMe,UAAU,GAAG,EAAnB;AACA,QAAM;AAACC,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAaH,IAAnB;;AACA,MAAIG,GAAG,GAAG,CAAV,EAAY;AACRF,IAAAA,UAAU,CAACN,IAAX,CAAgBT,IAAI,CAACiB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAhB;AACH;;AACD,MAAIC,GAAG,GAAGjB,IAAI,CAACO,MAAL,GAAc,CAAxB,EAA0B;AACtBQ,IAAAA,UAAU,CAACN,IAAX,CAAgBT,IAAI,CAACiB,GAAG,GAAG,CAAP,CAAJ,CAAcD,GAAd,CAAhB;AACH;;AACD,MAAIA,GAAG,GAAG,CAAV,EAAY;AACRD,IAAAA,UAAU,CAACN,IAAX,CAAgBT,IAAI,CAACiB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAhB;AACH;;AACD,MAAIA,GAAG,GAAGhB,IAAI,CAAC,CAAD,CAAJ,CAAQO,MAAR,GAAiB,CAA3B,EAA6B;AACzBQ,IAAAA,UAAU,CAACN,IAAX,CAAgBT,IAAI,CAACiB,GAAD,CAAJ,CAAUD,GAAG,GAAG,CAAhB,CAAhB;AACH;;AACD,SAAOD,UAAU,CAACG,MAAX,CAAkBC,SAAS,IAAI,CAACA,SAAS,CAACT,SAA1C,CAAP;AACH;;AACD,OAAO,SAASG,IAAT,CAAcX,OAAd,EAAsB;AACzB,QAAMU,IAAI,GAAG,EAAb;;AACA,SAAMV,OAAO,KAAG,IAAhB,EAAqB;AACjBU,IAAAA,IAAI,CAACQ,OAAL,CAAalB,OAAb;AACAA,IAAAA,OAAO,GAAGA,OAAO,CAACmB,YAAlB;AACH;;AACD,SAAOT,IAAP;AACH","sourcesContent":["export function BreadthFirstSearch(grid,startNode,endNode){\r\n    let visitedNodesInOrder = [];\r\n\r\n    let unvisitedNodes = getUnvisitedNeighbours(startNode,grid);\r\n    let currentNode = startNode;\r\n    while(unvisitedNodes.length>0){\r\n        currentNode = unvisitedNodes.shift();\r\n        unvisitedNodes.push(...getUnvisitedNeighbours(currentNode,grid));\r\n        currentNode.isVisited=true;\r\n        visitedNodesInOrder.push(currentNode);\r\n        if(currentNode===endNode){\r\n            return {\r\n\t\t\t\tvisitedOrder:visitedNodesInOrder,\r\n\t\t\t\tpath:Path(endNode),\r\n\t\t\t};\r\n        }\r\n    }\r\n}\r\n\r\nfunction getUnvisitedNeighbours(node, grid) {\r\n    const neighbours = [];\r\n    const {col, row} = node;\r\n    if (row > 0){\r\n        neighbours.push(grid[row - 1][col]);\r\n    } \r\n    if (row < grid.length - 1){\r\n        neighbours.push(grid[row + 1][col]);\r\n    }\r\n    if (col > 0){\r\n        neighbours.push(grid[row][col - 1]);\r\n    }\r\n    if (col < grid[0].length - 1){\r\n        neighbours.push(grid[row][col + 1]);\r\n    }\r\n    return neighbours.filter(neighbour => !neighbour.isVisited);\r\n}\r\nexport function Path(endNode){\r\n    const path = [];\r\n    while(endNode!==null){\r\n        path.unshift(endNode);\r\n        endNode = endNode.previousNode;\r\n    }\r\n    return path;\r\n}"]},"metadata":{},"sourceType":"module"}