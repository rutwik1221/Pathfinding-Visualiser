{"ast":null,"code":"var _jsxFileName = \"D:\\\\rutwik\\\\Documents\\\\New folder\\\\Web Apps\\\\visualiser\\\\src\\\\pfv\\\\pfv.jsx\";\nimport React, { Component } from 'react';\nimport Node from \"./Node/Node\";\nimport \"./pfv.css\";\nimport { dijkstra, shortestPath } from \"../algorithms/dijkstra.js\";\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst END_NODE_ROW = 10;\nconst END_NODE_COL = 35;\nexport default class PFV extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: this.makeGrid(),\n      isMouseDown: false\n    };\n    this.visualizeDijkstra = this.visualizeDijkstra.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = getGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  visualizeDijkstra() {\n    const {\n      grid\n    } = this.state;\n    const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\n    const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\n    const visitedOrder = dijkstra(grid, startNode, endNode);\n    const path = shortestPath(endNode);\n    animateVisitOrder(visitedOrder, path);\n  }\n\n  toggleWall(row, col) {\n    const newgrid = this.state.grid;\n    const node = newgrid[row][col];\n    const newnode = { ...node,\n      isWall: !node.isWall\n    };\n    console.log(newnode.isWall);\n    newgrid[node.row][node.col] = newnode;\n    this.setState({\n      grid: newgrid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    if (!this.state.isMouseDown) this.setState({\n      isMouseDown: true\n    });\n    this.toggleWall(row, col);\n  }\n\n  handleMouseEnter(row, col) {\n    if (this.state.isMouseDown) this.toggleWall(row, col);\n  }\n\n  handleMouseUp() {\n    this.setState({\n      isMouseDown: false\n    });\n  }\n\n  wall(row, col) {}\n\n  makeGrid() {\n    const grid = [];\n\n    for (let row = 0; row < 20; row++) {\n      const currentRow = [];\n\n      for (let col = 0; col < 50; col++) {\n        currentRow.push( /*#__PURE__*/React.createElement(Node, Object.assign({\n          key: `${col}-${row}`\n        }, createNode(col, row), {\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          wall: () => this.wall(row, col),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 21\n          }\n        })));\n      }\n\n      grid.push(currentRow);\n    }\n\n    return grid;\n  }\n\n  render() {\n    const {\n      grid\n    } = this.state;\n    console.log(grid[0][0]);\n    return (\n      /*#__PURE__*/\n\n      /*<>\r\n          <button onClick={this.visualizeDijkstra}>\r\n              Visualize\r\n          </button>\r\n          <table className='grid'>\r\n          <tbody>\r\n              {grid.map((row,rowIdx) => {\r\n                  return(\r\n                      <tr key={rowIdx}>\r\n                          {row.map((node,nodeIdx)=> {\r\n                              return <Node \r\n                              {...grid[rowIdx][nodeIdx]}\r\n                              />\r\n                          })}\r\n                      </tr>\r\n                  );\r\n              })}\r\n          </tbody>\r\n          \r\n          </table>\r\n      </>\r\n      */\n      React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.visualizeDijkstra,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, \"Visualize\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, grid.map((row, rowIdx) => {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          classname: \"row\",\n          key: rowIdx,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 29\n          }\n        }, row.map((node, nodeIdx) => {\n          return /*#__PURE__*/React.createElement(Node, Object.assign({\n            key: `${rowIdx}-${nodeIdx}`\n          }, node, {\n            onMouseDown: (row, col) => this.handleMouseDown(row, col),\n            onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n            onMouseUp: () => this.handleMouseUp(),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 41\n            }\n          }));\n        }));\n      })))\n    );\n  }\n\n} //onClick ={() =>{console.log(`Hi from ${rowIdx}`);}}\n\nPFV.defaultProps = {\n  START_NODE_ROW: START_NODE_ROW,\n  START_NODE_COL: START_NODE_COL,\n  END_NODE_ROW: END_NODE_ROW,\n  END_NODE_COL: END_NODE_COL,\n  nrows: 50,\n  ncols: 20\n};\n\nfunction getGrid() {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n}\n\nfunction createNode(col, row) {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isEnd: row === END_NODE_ROW && col === END_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n}\n\nfunction animateVisitOrder(visitedOrder, path) {\n  for (let i = 0; i <= visitedOrder.length; i++) {\n    if (i === visitedOrder.length) {\n      setTimeout(() => {\n        animatePath(path);\n      }, 10 * i);\n      return;\n    }\n\n    setTimeout(() => {\n      const node = visitedOrder[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-visited';\n    }, 10 * i);\n  }\n}\n\nfunction animatePath(path) {\n  for (let i = 0; i < path.length; i++) {\n    setTimeout(() => {\n      const node = path[i];\n      document.getElementById(`${node.row}-${node.col}`).className = 'node node-shortest-path';\n    }, 50 * i);\n  }\n}","map":{"version":3,"sources":["D:/rutwik/Documents/New folder/Web Apps/visualiser/src/pfv/pfv.jsx"],"names":["React","Component","Node","dijkstra","shortestPath","START_NODE_ROW","START_NODE_COL","END_NODE_ROW","END_NODE_COL","PFV","constructor","props","state","grid","makeGrid","isMouseDown","visualizeDijkstra","bind","componentDidMount","getGrid","setState","startNode","endNode","visitedOrder","path","animateVisitOrder","toggleWall","row","col","newgrid","node","newnode","isWall","console","log","handleMouseDown","handleMouseEnter","handleMouseUp","wall","currentRow","push","createNode","render","map","rowIdx","nodeIdx","defaultProps","nrows","ncols","isStart","isEnd","distance","Infinity","isVisited","previousNode","i","length","setTimeout","animatePath","document","getElementById","className"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from \"./Node/Node\"\r\nimport \"./pfv.css\";\r\nimport {dijkstra,shortestPath} from\"../algorithms/dijkstra.js\"\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst END_NODE_ROW = 10;\r\nconst END_NODE_COL = 35;\r\n\r\nexport default class PFV extends Component{\r\n    static defaultProps = {\r\n        START_NODE_ROW : START_NODE_ROW,\r\n        START_NODE_COL : START_NODE_COL,\r\n        END_NODE_ROW : END_NODE_ROW,\r\n        END_NODE_COL : END_NODE_COL,\r\n        nrows:50,\r\n        ncols:20,\r\n    }\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            grid: this.makeGrid(),\r\n            isMouseDown : false,\r\n        };\r\n        this.visualizeDijkstra=this.visualizeDijkstra.bind(this);\r\n    }\r\n    componentDidMount(){\r\n        const grid=getGrid();\r\n        this.setState({grid});\r\n    }\r\n    visualizeDijkstra(){\r\n        const {grid} = this.state;\r\n        const startNode = grid[this.props.START_NODE_ROW][this.props.START_NODE_COL];\r\n        const endNode = grid[this.props.END_NODE_ROW][this.props.END_NODE_COL];\r\n        const visitedOrder = dijkstra(grid, startNode, endNode);\r\n        const path = shortestPath(endNode);\r\n        animateVisitOrder(visitedOrder,path);\r\n    }\r\n    toggleWall(row, col){\r\n        const newgrid = this.state.grid;\r\n        const node = newgrid[row][col];\r\n        const newnode = {\r\n            ...node,\r\n            isWall:!node.isWall,\r\n        }\r\n        console.log(newnode.isWall);\r\n        newgrid[node.row][node.col]=newnode;\r\n        this.setState({grid:newgrid});\r\n    }\r\n    handleMouseDown(row, col) {\r\n        if(!this.state.isMouseDown)\r\n            this.setState({isMouseDown:true});\r\n        this.toggleWall(row, col);\r\n    }\r\n    handleMouseEnter(row, col) {\r\n        if(this.state.isMouseDown)\r\n            this.toggleWall(row, col);\r\n    }\r\n    \r\n\r\n    handleMouseUp(){\r\n        this.setState({isMouseDown:false});\r\n    }\r\n    wall(row,col){\r\n\r\n    }\r\n    makeGrid(){\r\n        const grid = [];\r\n        for(let row=0;row<20;row++){\r\n            const currentRow = [];\r\n            for(let col=0;col<50;col++){\r\n                currentRow.push(\r\n                    <Node\r\n                        key = {`${col}-${row}`}\r\n                        {...createNode(col,row)}\r\n                        onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                        onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                        onMouseUp={() => this.handleMouseUp()}\r\n                        wall={() => this.wall(row,col)}\r\n                    />\r\n                );\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    }     \r\n    render(){\r\n        const {grid} = this.state;\r\n        console.log(grid[0][0]);\r\n        return(\r\n            /*<>\r\n                <button onClick={this.visualizeDijkstra}>\r\n                    Visualize\r\n                </button>\r\n                <table className='grid'>\r\n                <tbody>\r\n                    {grid.map((row,rowIdx) => {\r\n                        return(\r\n                            <tr key={rowIdx}>\r\n                                {row.map((node,nodeIdx)=> {\r\n                                    return <Node \r\n                                    {...grid[rowIdx][nodeIdx]}\r\n                                    />\r\n                                })}\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n                \r\n                </table>\r\n            </>\r\n            */\r\n            <>\r\n                <button onClick={this.visualizeDijkstra}>\r\n                    Visualize\r\n                </button>\r\n                <div className=\"grid\">\r\n                    {grid.map((row,rowIdx)=>{\r\n                        return (\r\n                            <div classname='row' key ={rowIdx} >\r\n                                {row.map((node,nodeIdx)=>{\r\n                                    return (\r\n                                        <Node\r\n                                            key = {`${rowIdx}-${nodeIdx}`}\r\n                                            {...node}\r\n                                            onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                            onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                                            onMouseUp={() => this.handleMouseUp()}\r\n                                        />\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        ); \r\n                    })}\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n//onClick ={() =>{console.log(`Hi from ${rowIdx}`);}}\r\nfunction getGrid() {\r\n    const grid = [];\r\n    for(let row=0;row<20;row++){\r\n        const currentRow = [];\r\n        for(let col=0;col<50;col++){\r\n            currentRow.push(createNode(col,row));\r\n        }\r\n        grid.push(currentRow);\r\n    }\r\n    return grid;\r\n}\r\n\r\nfunction createNode(col,row){\r\n    return{\r\n        col,\r\n        row,\r\n        isStart:row === START_NODE_ROW && col===START_NODE_COL,\r\n        isEnd: row === END_NODE_ROW && col === END_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n    };\r\n}\r\nfunction animateVisitOrder(visitedOrder, path) {\r\n    for (let i = 0; i <= visitedOrder.length; i++) {\r\n      if (i === visitedOrder.length) {\r\n        setTimeout(() => {\r\n          animatePath(path);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedOrder[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className ='node node-visited';\r\n      }, 10 * i);\r\n    }\r\n}\r\nfunction animatePath(path) {\r\n    for (let i = 0; i < path.length; i++) {\r\n      setTimeout(() => {\r\n        const node = path[i];\r\n        document.getElementById(`${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}